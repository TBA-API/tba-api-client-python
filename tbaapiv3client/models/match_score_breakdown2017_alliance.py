# coding: utf-8

"""
    The Blue Alliance API v3

    # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.  # noqa: E501

    The version of the OpenAPI document: 3.8.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tbaapiv3client.configuration import Configuration


class MatchScoreBreakdown2017Alliance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'auto_points': 'int',
        'teleop_points': 'int',
        'foul_points': 'int',
        'adjust_points': 'int',
        'total_points': 'int',
        'robot1_auto': 'str',
        'robot2_auto': 'str',
        'robot3_auto': 'str',
        'rotor1_auto': 'bool',
        'rotor2_auto': 'bool',
        'auto_fuel_low': 'int',
        'auto_fuel_high': 'int',
        'auto_mobility_points': 'int',
        'auto_rotor_points': 'int',
        'auto_fuel_points': 'int',
        'teleop_fuel_points': 'int',
        'teleop_fuel_low': 'int',
        'teleop_fuel_high': 'int',
        'teleop_rotor_points': 'int',
        'k_pa_ranking_point_achieved': 'bool',
        'teleop_takeoff_points': 'int',
        'k_pa_bonus_points': 'int',
        'rotor_bonus_points': 'int',
        'rotor1_engaged': 'bool',
        'rotor2_engaged': 'bool',
        'rotor3_engaged': 'bool',
        'rotor4_engaged': 'bool',
        'rotor_ranking_point_achieved': 'bool',
        'tech_foul_count': 'int',
        'foul_count': 'int',
        'touchpad_near': 'str',
        'touchpad_middle': 'str',
        'touchpad_far': 'str'
    }

    attribute_map = {
        'auto_points': 'autoPoints',
        'teleop_points': 'teleopPoints',
        'foul_points': 'foulPoints',
        'adjust_points': 'adjustPoints',
        'total_points': 'totalPoints',
        'robot1_auto': 'robot1Auto',
        'robot2_auto': 'robot2Auto',
        'robot3_auto': 'robot3Auto',
        'rotor1_auto': 'rotor1Auto',
        'rotor2_auto': 'rotor2Auto',
        'auto_fuel_low': 'autoFuelLow',
        'auto_fuel_high': 'autoFuelHigh',
        'auto_mobility_points': 'autoMobilityPoints',
        'auto_rotor_points': 'autoRotorPoints',
        'auto_fuel_points': 'autoFuelPoints',
        'teleop_fuel_points': 'teleopFuelPoints',
        'teleop_fuel_low': 'teleopFuelLow',
        'teleop_fuel_high': 'teleopFuelHigh',
        'teleop_rotor_points': 'teleopRotorPoints',
        'k_pa_ranking_point_achieved': 'kPaRankingPointAchieved',
        'teleop_takeoff_points': 'teleopTakeoffPoints',
        'k_pa_bonus_points': 'kPaBonusPoints',
        'rotor_bonus_points': 'rotorBonusPoints',
        'rotor1_engaged': 'rotor1Engaged',
        'rotor2_engaged': 'rotor2Engaged',
        'rotor3_engaged': 'rotor3Engaged',
        'rotor4_engaged': 'rotor4Engaged',
        'rotor_ranking_point_achieved': 'rotorRankingPointAchieved',
        'tech_foul_count': 'techFoulCount',
        'foul_count': 'foulCount',
        'touchpad_near': 'touchpadNear',
        'touchpad_middle': 'touchpadMiddle',
        'touchpad_far': 'touchpadFar'
    }

    def __init__(self, auto_points=None, teleop_points=None, foul_points=None, adjust_points=None, total_points=None, robot1_auto=None, robot2_auto=None, robot3_auto=None, rotor1_auto=None, rotor2_auto=None, auto_fuel_low=None, auto_fuel_high=None, auto_mobility_points=None, auto_rotor_points=None, auto_fuel_points=None, teleop_fuel_points=None, teleop_fuel_low=None, teleop_fuel_high=None, teleop_rotor_points=None, k_pa_ranking_point_achieved=None, teleop_takeoff_points=None, k_pa_bonus_points=None, rotor_bonus_points=None, rotor1_engaged=None, rotor2_engaged=None, rotor3_engaged=None, rotor4_engaged=None, rotor_ranking_point_achieved=None, tech_foul_count=None, foul_count=None, touchpad_near=None, touchpad_middle=None, touchpad_far=None, local_vars_configuration=None):  # noqa: E501
        """MatchScoreBreakdown2017Alliance - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._auto_points = None
        self._teleop_points = None
        self._foul_points = None
        self._adjust_points = None
        self._total_points = None
        self._robot1_auto = None
        self._robot2_auto = None
        self._robot3_auto = None
        self._rotor1_auto = None
        self._rotor2_auto = None
        self._auto_fuel_low = None
        self._auto_fuel_high = None
        self._auto_mobility_points = None
        self._auto_rotor_points = None
        self._auto_fuel_points = None
        self._teleop_fuel_points = None
        self._teleop_fuel_low = None
        self._teleop_fuel_high = None
        self._teleop_rotor_points = None
        self._k_pa_ranking_point_achieved = None
        self._teleop_takeoff_points = None
        self._k_pa_bonus_points = None
        self._rotor_bonus_points = None
        self._rotor1_engaged = None
        self._rotor2_engaged = None
        self._rotor3_engaged = None
        self._rotor4_engaged = None
        self._rotor_ranking_point_achieved = None
        self._tech_foul_count = None
        self._foul_count = None
        self._touchpad_near = None
        self._touchpad_middle = None
        self._touchpad_far = None
        self.discriminator = None

        if auto_points is not None:
            self.auto_points = auto_points
        if teleop_points is not None:
            self.teleop_points = teleop_points
        if foul_points is not None:
            self.foul_points = foul_points
        if adjust_points is not None:
            self.adjust_points = adjust_points
        if total_points is not None:
            self.total_points = total_points
        if robot1_auto is not None:
            self.robot1_auto = robot1_auto
        if robot2_auto is not None:
            self.robot2_auto = robot2_auto
        if robot3_auto is not None:
            self.robot3_auto = robot3_auto
        if rotor1_auto is not None:
            self.rotor1_auto = rotor1_auto
        if rotor2_auto is not None:
            self.rotor2_auto = rotor2_auto
        if auto_fuel_low is not None:
            self.auto_fuel_low = auto_fuel_low
        if auto_fuel_high is not None:
            self.auto_fuel_high = auto_fuel_high
        if auto_mobility_points is not None:
            self.auto_mobility_points = auto_mobility_points
        if auto_rotor_points is not None:
            self.auto_rotor_points = auto_rotor_points
        if auto_fuel_points is not None:
            self.auto_fuel_points = auto_fuel_points
        if teleop_fuel_points is not None:
            self.teleop_fuel_points = teleop_fuel_points
        if teleop_fuel_low is not None:
            self.teleop_fuel_low = teleop_fuel_low
        if teleop_fuel_high is not None:
            self.teleop_fuel_high = teleop_fuel_high
        if teleop_rotor_points is not None:
            self.teleop_rotor_points = teleop_rotor_points
        if k_pa_ranking_point_achieved is not None:
            self.k_pa_ranking_point_achieved = k_pa_ranking_point_achieved
        if teleop_takeoff_points is not None:
            self.teleop_takeoff_points = teleop_takeoff_points
        if k_pa_bonus_points is not None:
            self.k_pa_bonus_points = k_pa_bonus_points
        if rotor_bonus_points is not None:
            self.rotor_bonus_points = rotor_bonus_points
        if rotor1_engaged is not None:
            self.rotor1_engaged = rotor1_engaged
        if rotor2_engaged is not None:
            self.rotor2_engaged = rotor2_engaged
        if rotor3_engaged is not None:
            self.rotor3_engaged = rotor3_engaged
        if rotor4_engaged is not None:
            self.rotor4_engaged = rotor4_engaged
        if rotor_ranking_point_achieved is not None:
            self.rotor_ranking_point_achieved = rotor_ranking_point_achieved
        if tech_foul_count is not None:
            self.tech_foul_count = tech_foul_count
        if foul_count is not None:
            self.foul_count = foul_count
        if touchpad_near is not None:
            self.touchpad_near = touchpad_near
        if touchpad_middle is not None:
            self.touchpad_middle = touchpad_middle
        if touchpad_far is not None:
            self.touchpad_far = touchpad_far

    @property
    def auto_points(self):
        """Gets the auto_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The auto_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: int
        """
        return self._auto_points

    @auto_points.setter
    def auto_points(self, auto_points):
        """Sets the auto_points of this MatchScoreBreakdown2017Alliance.


        :param auto_points: The auto_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: int
        """

        self._auto_points = auto_points

    @property
    def teleop_points(self):
        """Gets the teleop_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The teleop_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: int
        """
        return self._teleop_points

    @teleop_points.setter
    def teleop_points(self, teleop_points):
        """Sets the teleop_points of this MatchScoreBreakdown2017Alliance.


        :param teleop_points: The teleop_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: int
        """

        self._teleop_points = teleop_points

    @property
    def foul_points(self):
        """Gets the foul_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The foul_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: int
        """
        return self._foul_points

    @foul_points.setter
    def foul_points(self, foul_points):
        """Sets the foul_points of this MatchScoreBreakdown2017Alliance.


        :param foul_points: The foul_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: int
        """

        self._foul_points = foul_points

    @property
    def adjust_points(self):
        """Gets the adjust_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The adjust_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: int
        """
        return self._adjust_points

    @adjust_points.setter
    def adjust_points(self, adjust_points):
        """Sets the adjust_points of this MatchScoreBreakdown2017Alliance.


        :param adjust_points: The adjust_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: int
        """

        self._adjust_points = adjust_points

    @property
    def total_points(self):
        """Gets the total_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The total_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: int
        """
        return self._total_points

    @total_points.setter
    def total_points(self, total_points):
        """Sets the total_points of this MatchScoreBreakdown2017Alliance.


        :param total_points: The total_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: int
        """

        self._total_points = total_points

    @property
    def robot1_auto(self):
        """Gets the robot1_auto of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The robot1_auto of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: str
        """
        return self._robot1_auto

    @robot1_auto.setter
    def robot1_auto(self, robot1_auto):
        """Sets the robot1_auto of this MatchScoreBreakdown2017Alliance.


        :param robot1_auto: The robot1_auto of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "Mobility", "None"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and robot1_auto not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `robot1_auto` ({0}), must be one of {1}"  # noqa: E501
                .format(robot1_auto, allowed_values)
            )

        self._robot1_auto = robot1_auto

    @property
    def robot2_auto(self):
        """Gets the robot2_auto of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The robot2_auto of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: str
        """
        return self._robot2_auto

    @robot2_auto.setter
    def robot2_auto(self, robot2_auto):
        """Sets the robot2_auto of this MatchScoreBreakdown2017Alliance.


        :param robot2_auto: The robot2_auto of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "Mobility", "None"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and robot2_auto not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `robot2_auto` ({0}), must be one of {1}"  # noqa: E501
                .format(robot2_auto, allowed_values)
            )

        self._robot2_auto = robot2_auto

    @property
    def robot3_auto(self):
        """Gets the robot3_auto of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The robot3_auto of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: str
        """
        return self._robot3_auto

    @robot3_auto.setter
    def robot3_auto(self, robot3_auto):
        """Sets the robot3_auto of this MatchScoreBreakdown2017Alliance.


        :param robot3_auto: The robot3_auto of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "Mobility", "None"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and robot3_auto not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `robot3_auto` ({0}), must be one of {1}"  # noqa: E501
                .format(robot3_auto, allowed_values)
            )

        self._robot3_auto = robot3_auto

    @property
    def rotor1_auto(self):
        """Gets the rotor1_auto of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The rotor1_auto of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: bool
        """
        return self._rotor1_auto

    @rotor1_auto.setter
    def rotor1_auto(self, rotor1_auto):
        """Sets the rotor1_auto of this MatchScoreBreakdown2017Alliance.


        :param rotor1_auto: The rotor1_auto of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: bool
        """

        self._rotor1_auto = rotor1_auto

    @property
    def rotor2_auto(self):
        """Gets the rotor2_auto of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The rotor2_auto of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: bool
        """
        return self._rotor2_auto

    @rotor2_auto.setter
    def rotor2_auto(self, rotor2_auto):
        """Sets the rotor2_auto of this MatchScoreBreakdown2017Alliance.


        :param rotor2_auto: The rotor2_auto of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: bool
        """

        self._rotor2_auto = rotor2_auto

    @property
    def auto_fuel_low(self):
        """Gets the auto_fuel_low of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The auto_fuel_low of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: int
        """
        return self._auto_fuel_low

    @auto_fuel_low.setter
    def auto_fuel_low(self, auto_fuel_low):
        """Sets the auto_fuel_low of this MatchScoreBreakdown2017Alliance.


        :param auto_fuel_low: The auto_fuel_low of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: int
        """

        self._auto_fuel_low = auto_fuel_low

    @property
    def auto_fuel_high(self):
        """Gets the auto_fuel_high of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The auto_fuel_high of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: int
        """
        return self._auto_fuel_high

    @auto_fuel_high.setter
    def auto_fuel_high(self, auto_fuel_high):
        """Sets the auto_fuel_high of this MatchScoreBreakdown2017Alliance.


        :param auto_fuel_high: The auto_fuel_high of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: int
        """

        self._auto_fuel_high = auto_fuel_high

    @property
    def auto_mobility_points(self):
        """Gets the auto_mobility_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The auto_mobility_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: int
        """
        return self._auto_mobility_points

    @auto_mobility_points.setter
    def auto_mobility_points(self, auto_mobility_points):
        """Sets the auto_mobility_points of this MatchScoreBreakdown2017Alliance.


        :param auto_mobility_points: The auto_mobility_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: int
        """

        self._auto_mobility_points = auto_mobility_points

    @property
    def auto_rotor_points(self):
        """Gets the auto_rotor_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The auto_rotor_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: int
        """
        return self._auto_rotor_points

    @auto_rotor_points.setter
    def auto_rotor_points(self, auto_rotor_points):
        """Sets the auto_rotor_points of this MatchScoreBreakdown2017Alliance.


        :param auto_rotor_points: The auto_rotor_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: int
        """

        self._auto_rotor_points = auto_rotor_points

    @property
    def auto_fuel_points(self):
        """Gets the auto_fuel_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The auto_fuel_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: int
        """
        return self._auto_fuel_points

    @auto_fuel_points.setter
    def auto_fuel_points(self, auto_fuel_points):
        """Sets the auto_fuel_points of this MatchScoreBreakdown2017Alliance.


        :param auto_fuel_points: The auto_fuel_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: int
        """

        self._auto_fuel_points = auto_fuel_points

    @property
    def teleop_fuel_points(self):
        """Gets the teleop_fuel_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The teleop_fuel_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: int
        """
        return self._teleop_fuel_points

    @teleop_fuel_points.setter
    def teleop_fuel_points(self, teleop_fuel_points):
        """Sets the teleop_fuel_points of this MatchScoreBreakdown2017Alliance.


        :param teleop_fuel_points: The teleop_fuel_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: int
        """

        self._teleop_fuel_points = teleop_fuel_points

    @property
    def teleop_fuel_low(self):
        """Gets the teleop_fuel_low of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The teleop_fuel_low of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: int
        """
        return self._teleop_fuel_low

    @teleop_fuel_low.setter
    def teleop_fuel_low(self, teleop_fuel_low):
        """Sets the teleop_fuel_low of this MatchScoreBreakdown2017Alliance.


        :param teleop_fuel_low: The teleop_fuel_low of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: int
        """

        self._teleop_fuel_low = teleop_fuel_low

    @property
    def teleop_fuel_high(self):
        """Gets the teleop_fuel_high of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The teleop_fuel_high of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: int
        """
        return self._teleop_fuel_high

    @teleop_fuel_high.setter
    def teleop_fuel_high(self, teleop_fuel_high):
        """Sets the teleop_fuel_high of this MatchScoreBreakdown2017Alliance.


        :param teleop_fuel_high: The teleop_fuel_high of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: int
        """

        self._teleop_fuel_high = teleop_fuel_high

    @property
    def teleop_rotor_points(self):
        """Gets the teleop_rotor_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The teleop_rotor_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: int
        """
        return self._teleop_rotor_points

    @teleop_rotor_points.setter
    def teleop_rotor_points(self, teleop_rotor_points):
        """Sets the teleop_rotor_points of this MatchScoreBreakdown2017Alliance.


        :param teleop_rotor_points: The teleop_rotor_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: int
        """

        self._teleop_rotor_points = teleop_rotor_points

    @property
    def k_pa_ranking_point_achieved(self):
        """Gets the k_pa_ranking_point_achieved of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The k_pa_ranking_point_achieved of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: bool
        """
        return self._k_pa_ranking_point_achieved

    @k_pa_ranking_point_achieved.setter
    def k_pa_ranking_point_achieved(self, k_pa_ranking_point_achieved):
        """Sets the k_pa_ranking_point_achieved of this MatchScoreBreakdown2017Alliance.


        :param k_pa_ranking_point_achieved: The k_pa_ranking_point_achieved of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: bool
        """

        self._k_pa_ranking_point_achieved = k_pa_ranking_point_achieved

    @property
    def teleop_takeoff_points(self):
        """Gets the teleop_takeoff_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The teleop_takeoff_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: int
        """
        return self._teleop_takeoff_points

    @teleop_takeoff_points.setter
    def teleop_takeoff_points(self, teleop_takeoff_points):
        """Sets the teleop_takeoff_points of this MatchScoreBreakdown2017Alliance.


        :param teleop_takeoff_points: The teleop_takeoff_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: int
        """

        self._teleop_takeoff_points = teleop_takeoff_points

    @property
    def k_pa_bonus_points(self):
        """Gets the k_pa_bonus_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The k_pa_bonus_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: int
        """
        return self._k_pa_bonus_points

    @k_pa_bonus_points.setter
    def k_pa_bonus_points(self, k_pa_bonus_points):
        """Sets the k_pa_bonus_points of this MatchScoreBreakdown2017Alliance.


        :param k_pa_bonus_points: The k_pa_bonus_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: int
        """

        self._k_pa_bonus_points = k_pa_bonus_points

    @property
    def rotor_bonus_points(self):
        """Gets the rotor_bonus_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The rotor_bonus_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: int
        """
        return self._rotor_bonus_points

    @rotor_bonus_points.setter
    def rotor_bonus_points(self, rotor_bonus_points):
        """Sets the rotor_bonus_points of this MatchScoreBreakdown2017Alliance.


        :param rotor_bonus_points: The rotor_bonus_points of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: int
        """

        self._rotor_bonus_points = rotor_bonus_points

    @property
    def rotor1_engaged(self):
        """Gets the rotor1_engaged of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The rotor1_engaged of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: bool
        """
        return self._rotor1_engaged

    @rotor1_engaged.setter
    def rotor1_engaged(self, rotor1_engaged):
        """Sets the rotor1_engaged of this MatchScoreBreakdown2017Alliance.


        :param rotor1_engaged: The rotor1_engaged of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: bool
        """

        self._rotor1_engaged = rotor1_engaged

    @property
    def rotor2_engaged(self):
        """Gets the rotor2_engaged of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The rotor2_engaged of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: bool
        """
        return self._rotor2_engaged

    @rotor2_engaged.setter
    def rotor2_engaged(self, rotor2_engaged):
        """Sets the rotor2_engaged of this MatchScoreBreakdown2017Alliance.


        :param rotor2_engaged: The rotor2_engaged of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: bool
        """

        self._rotor2_engaged = rotor2_engaged

    @property
    def rotor3_engaged(self):
        """Gets the rotor3_engaged of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The rotor3_engaged of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: bool
        """
        return self._rotor3_engaged

    @rotor3_engaged.setter
    def rotor3_engaged(self, rotor3_engaged):
        """Sets the rotor3_engaged of this MatchScoreBreakdown2017Alliance.


        :param rotor3_engaged: The rotor3_engaged of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: bool
        """

        self._rotor3_engaged = rotor3_engaged

    @property
    def rotor4_engaged(self):
        """Gets the rotor4_engaged of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The rotor4_engaged of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: bool
        """
        return self._rotor4_engaged

    @rotor4_engaged.setter
    def rotor4_engaged(self, rotor4_engaged):
        """Sets the rotor4_engaged of this MatchScoreBreakdown2017Alliance.


        :param rotor4_engaged: The rotor4_engaged of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: bool
        """

        self._rotor4_engaged = rotor4_engaged

    @property
    def rotor_ranking_point_achieved(self):
        """Gets the rotor_ranking_point_achieved of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The rotor_ranking_point_achieved of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: bool
        """
        return self._rotor_ranking_point_achieved

    @rotor_ranking_point_achieved.setter
    def rotor_ranking_point_achieved(self, rotor_ranking_point_achieved):
        """Sets the rotor_ranking_point_achieved of this MatchScoreBreakdown2017Alliance.


        :param rotor_ranking_point_achieved: The rotor_ranking_point_achieved of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: bool
        """

        self._rotor_ranking_point_achieved = rotor_ranking_point_achieved

    @property
    def tech_foul_count(self):
        """Gets the tech_foul_count of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The tech_foul_count of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: int
        """
        return self._tech_foul_count

    @tech_foul_count.setter
    def tech_foul_count(self, tech_foul_count):
        """Sets the tech_foul_count of this MatchScoreBreakdown2017Alliance.


        :param tech_foul_count: The tech_foul_count of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: int
        """

        self._tech_foul_count = tech_foul_count

    @property
    def foul_count(self):
        """Gets the foul_count of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The foul_count of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: int
        """
        return self._foul_count

    @foul_count.setter
    def foul_count(self, foul_count):
        """Sets the foul_count of this MatchScoreBreakdown2017Alliance.


        :param foul_count: The foul_count of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: int
        """

        self._foul_count = foul_count

    @property
    def touchpad_near(self):
        """Gets the touchpad_near of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The touchpad_near of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: str
        """
        return self._touchpad_near

    @touchpad_near.setter
    def touchpad_near(self, touchpad_near):
        """Sets the touchpad_near of this MatchScoreBreakdown2017Alliance.


        :param touchpad_near: The touchpad_near of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: str
        """

        self._touchpad_near = touchpad_near

    @property
    def touchpad_middle(self):
        """Gets the touchpad_middle of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The touchpad_middle of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: str
        """
        return self._touchpad_middle

    @touchpad_middle.setter
    def touchpad_middle(self, touchpad_middle):
        """Sets the touchpad_middle of this MatchScoreBreakdown2017Alliance.


        :param touchpad_middle: The touchpad_middle of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: str
        """

        self._touchpad_middle = touchpad_middle

    @property
    def touchpad_far(self):
        """Gets the touchpad_far of this MatchScoreBreakdown2017Alliance.  # noqa: E501


        :return: The touchpad_far of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :rtype: str
        """
        return self._touchpad_far

    @touchpad_far.setter
    def touchpad_far(self, touchpad_far):
        """Sets the touchpad_far of this MatchScoreBreakdown2017Alliance.


        :param touchpad_far: The touchpad_far of this MatchScoreBreakdown2017Alliance.  # noqa: E501
        :type: str
        """

        self._touchpad_far = touchpad_far

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MatchScoreBreakdown2017Alliance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MatchScoreBreakdown2017Alliance):
            return True

        return self.to_dict() != other.to_dict()
