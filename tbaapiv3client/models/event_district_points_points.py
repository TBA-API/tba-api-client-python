# coding: utf-8

"""
    The Blue Alliance API v3

    # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.  # noqa: E501

    The version of the OpenAPI document: 3.8.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tbaapiv3client.configuration import Configuration


class EventDistrictPointsPoints(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'total': 'int',
        'alliance_points': 'int',
        'elim_points': 'int',
        'award_points': 'int',
        'qual_points': 'int'
    }

    attribute_map = {
        'total': 'total',
        'alliance_points': 'alliance_points',
        'elim_points': 'elim_points',
        'award_points': 'award_points',
        'qual_points': 'qual_points'
    }

    def __init__(self, total=None, alliance_points=None, elim_points=None, award_points=None, qual_points=None, local_vars_configuration=None):  # noqa: E501
        """EventDistrictPointsPoints - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._total = None
        self._alliance_points = None
        self._elim_points = None
        self._award_points = None
        self._qual_points = None
        self.discriminator = None

        self.total = total
        self.alliance_points = alliance_points
        self.elim_points = elim_points
        self.award_points = award_points
        self.qual_points = qual_points

    @property
    def total(self):
        """Gets the total of this EventDistrictPointsPoints.  # noqa: E501

        Total points awarded at this event.  # noqa: E501

        :return: The total of this EventDistrictPointsPoints.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this EventDistrictPointsPoints.

        Total points awarded at this event.  # noqa: E501

        :param total: The total of this EventDistrictPointsPoints.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and total is None:  # noqa: E501
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    @property
    def alliance_points(self):
        """Gets the alliance_points of this EventDistrictPointsPoints.  # noqa: E501

        Points awarded for alliance selection  # noqa: E501

        :return: The alliance_points of this EventDistrictPointsPoints.  # noqa: E501
        :rtype: int
        """
        return self._alliance_points

    @alliance_points.setter
    def alliance_points(self, alliance_points):
        """Sets the alliance_points of this EventDistrictPointsPoints.

        Points awarded for alliance selection  # noqa: E501

        :param alliance_points: The alliance_points of this EventDistrictPointsPoints.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and alliance_points is None:  # noqa: E501
            raise ValueError("Invalid value for `alliance_points`, must not be `None`")  # noqa: E501

        self._alliance_points = alliance_points

    @property
    def elim_points(self):
        """Gets the elim_points of this EventDistrictPointsPoints.  # noqa: E501

        Points awarded for elimination match performance.  # noqa: E501

        :return: The elim_points of this EventDistrictPointsPoints.  # noqa: E501
        :rtype: int
        """
        return self._elim_points

    @elim_points.setter
    def elim_points(self, elim_points):
        """Sets the elim_points of this EventDistrictPointsPoints.

        Points awarded for elimination match performance.  # noqa: E501

        :param elim_points: The elim_points of this EventDistrictPointsPoints.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and elim_points is None:  # noqa: E501
            raise ValueError("Invalid value for `elim_points`, must not be `None`")  # noqa: E501

        self._elim_points = elim_points

    @property
    def award_points(self):
        """Gets the award_points of this EventDistrictPointsPoints.  # noqa: E501

        Points awarded for event awards.  # noqa: E501

        :return: The award_points of this EventDistrictPointsPoints.  # noqa: E501
        :rtype: int
        """
        return self._award_points

    @award_points.setter
    def award_points(self, award_points):
        """Sets the award_points of this EventDistrictPointsPoints.

        Points awarded for event awards.  # noqa: E501

        :param award_points: The award_points of this EventDistrictPointsPoints.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and award_points is None:  # noqa: E501
            raise ValueError("Invalid value for `award_points`, must not be `None`")  # noqa: E501

        self._award_points = award_points

    @property
    def qual_points(self):
        """Gets the qual_points of this EventDistrictPointsPoints.  # noqa: E501

        Points awarded for qualification match performance.  # noqa: E501

        :return: The qual_points of this EventDistrictPointsPoints.  # noqa: E501
        :rtype: int
        """
        return self._qual_points

    @qual_points.setter
    def qual_points(self, qual_points):
        """Sets the qual_points of this EventDistrictPointsPoints.

        Points awarded for qualification match performance.  # noqa: E501

        :param qual_points: The qual_points of this EventDistrictPointsPoints.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and qual_points is None:  # noqa: E501
            raise ValueError("Invalid value for `qual_points`, must not be `None`")  # noqa: E501

        self._qual_points = qual_points

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventDistrictPointsPoints):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EventDistrictPointsPoints):
            return True

        return self.to_dict() != other.to_dict()
