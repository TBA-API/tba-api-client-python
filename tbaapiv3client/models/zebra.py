# coding: utf-8

"""
    The Blue Alliance API v3

    # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.  # noqa: E501

    The version of the OpenAPI document: 3.8.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tbaapiv3client.configuration import Configuration


class Zebra(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'key': 'str',
        'times': 'list[float]',
        'alliances': 'ZebraAlliances'
    }

    attribute_map = {
        'key': 'key',
        'times': 'times',
        'alliances': 'alliances'
    }

    def __init__(self, key=None, times=None, alliances=None, local_vars_configuration=None):  # noqa: E501
        """Zebra - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._key = None
        self._times = None
        self._alliances = None
        self.discriminator = None

        self.key = key
        self.times = times
        self.alliances = alliances

    @property
    def key(self):
        """Gets the key of this Zebra.  # noqa: E501

        TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may be appended to the competition level if more than one match in required per set.  # noqa: E501

        :return: The key of this Zebra.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Zebra.

        TBA match key with the format `yyyy[EVENT_CODE]_[COMP_LEVEL]m[MATCH_NUMBER]`, where `yyyy` is the year, and `EVENT_CODE` is the event code of the event, `COMP_LEVEL` is (qm, ef, qf, sf, f), and `MATCH_NUMBER` is the match number in the competition level. A set number may be appended to the competition level if more than one match in required per set.  # noqa: E501

        :param key: The key of this Zebra.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and key is None:  # noqa: E501
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def times(self):
        """Gets the times of this Zebra.  # noqa: E501

        A list of relative timestamps for each data point. Each timestamp will correspond to the X and Y value at the same index in a team xs and ys arrays. `times`, all teams `xs` and all teams `ys` are guarenteed to be the same length.  # noqa: E501

        :return: The times of this Zebra.  # noqa: E501
        :rtype: list[float]
        """
        return self._times

    @times.setter
    def times(self, times):
        """Sets the times of this Zebra.

        A list of relative timestamps for each data point. Each timestamp will correspond to the X and Y value at the same index in a team xs and ys arrays. `times`, all teams `xs` and all teams `ys` are guarenteed to be the same length.  # noqa: E501

        :param times: The times of this Zebra.  # noqa: E501
        :type: list[float]
        """
        if self.local_vars_configuration.client_side_validation and times is None:  # noqa: E501
            raise ValueError("Invalid value for `times`, must not be `None`")  # noqa: E501

        self._times = times

    @property
    def alliances(self):
        """Gets the alliances of this Zebra.  # noqa: E501


        :return: The alliances of this Zebra.  # noqa: E501
        :rtype: ZebraAlliances
        """
        return self._alliances

    @alliances.setter
    def alliances(self, alliances):
        """Sets the alliances of this Zebra.


        :param alliances: The alliances of this Zebra.  # noqa: E501
        :type: ZebraAlliances
        """
        if self.local_vars_configuration.client_side_validation and alliances is None:  # noqa: E501
            raise ValueError("Invalid value for `alliances`, must not be `None`")  # noqa: E501

        self._alliances = alliances

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Zebra):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Zebra):
            return True

        return self.to_dict() != other.to_dict()
