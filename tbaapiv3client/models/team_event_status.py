# coding: utf-8

"""
    The Blue Alliance API v3

    # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.  # noqa: E501

    The version of the OpenAPI document: 3.8.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tbaapiv3client.configuration import Configuration


class TeamEventStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'qual': 'TeamEventStatusRank',
        'alliance': 'TeamEventStatusAlliance',
        'playoff': 'TeamEventStatusPlayoff',
        'alliance_status_str': 'str',
        'playoff_status_str': 'str',
        'overall_status_str': 'str',
        'next_match_key': 'str',
        'last_match_key': 'str'
    }

    attribute_map = {
        'qual': 'qual',
        'alliance': 'alliance',
        'playoff': 'playoff',
        'alliance_status_str': 'alliance_status_str',
        'playoff_status_str': 'playoff_status_str',
        'overall_status_str': 'overall_status_str',
        'next_match_key': 'next_match_key',
        'last_match_key': 'last_match_key'
    }

    def __init__(self, qual=None, alliance=None, playoff=None, alliance_status_str=None, playoff_status_str=None, overall_status_str=None, next_match_key=None, last_match_key=None, local_vars_configuration=None):  # noqa: E501
        """TeamEventStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._qual = None
        self._alliance = None
        self._playoff = None
        self._alliance_status_str = None
        self._playoff_status_str = None
        self._overall_status_str = None
        self._next_match_key = None
        self._last_match_key = None
        self.discriminator = None

        if qual is not None:
            self.qual = qual
        if alliance is not None:
            self.alliance = alliance
        if playoff is not None:
            self.playoff = playoff
        if alliance_status_str is not None:
            self.alliance_status_str = alliance_status_str
        if playoff_status_str is not None:
            self.playoff_status_str = playoff_status_str
        if overall_status_str is not None:
            self.overall_status_str = overall_status_str
        if next_match_key is not None:
            self.next_match_key = next_match_key
        if last_match_key is not None:
            self.last_match_key = last_match_key

    @property
    def qual(self):
        """Gets the qual of this TeamEventStatus.  # noqa: E501


        :return: The qual of this TeamEventStatus.  # noqa: E501
        :rtype: TeamEventStatusRank
        """
        return self._qual

    @qual.setter
    def qual(self, qual):
        """Sets the qual of this TeamEventStatus.


        :param qual: The qual of this TeamEventStatus.  # noqa: E501
        :type: TeamEventStatusRank
        """

        self._qual = qual

    @property
    def alliance(self):
        """Gets the alliance of this TeamEventStatus.  # noqa: E501


        :return: The alliance of this TeamEventStatus.  # noqa: E501
        :rtype: TeamEventStatusAlliance
        """
        return self._alliance

    @alliance.setter
    def alliance(self, alliance):
        """Sets the alliance of this TeamEventStatus.


        :param alliance: The alliance of this TeamEventStatus.  # noqa: E501
        :type: TeamEventStatusAlliance
        """

        self._alliance = alliance

    @property
    def playoff(self):
        """Gets the playoff of this TeamEventStatus.  # noqa: E501


        :return: The playoff of this TeamEventStatus.  # noqa: E501
        :rtype: TeamEventStatusPlayoff
        """
        return self._playoff

    @playoff.setter
    def playoff(self, playoff):
        """Sets the playoff of this TeamEventStatus.


        :param playoff: The playoff of this TeamEventStatus.  # noqa: E501
        :type: TeamEventStatusPlayoff
        """

        self._playoff = playoff

    @property
    def alliance_status_str(self):
        """Gets the alliance_status_str of this TeamEventStatus.  # noqa: E501

        An HTML formatted string suitable for display to the user containing the team's alliance pick status.  # noqa: E501

        :return: The alliance_status_str of this TeamEventStatus.  # noqa: E501
        :rtype: str
        """
        return self._alliance_status_str

    @alliance_status_str.setter
    def alliance_status_str(self, alliance_status_str):
        """Sets the alliance_status_str of this TeamEventStatus.

        An HTML formatted string suitable for display to the user containing the team's alliance pick status.  # noqa: E501

        :param alliance_status_str: The alliance_status_str of this TeamEventStatus.  # noqa: E501
        :type: str
        """

        self._alliance_status_str = alliance_status_str

    @property
    def playoff_status_str(self):
        """Gets the playoff_status_str of this TeamEventStatus.  # noqa: E501

        An HTML formatter string suitable for display to the user containing the team's playoff status.  # noqa: E501

        :return: The playoff_status_str of this TeamEventStatus.  # noqa: E501
        :rtype: str
        """
        return self._playoff_status_str

    @playoff_status_str.setter
    def playoff_status_str(self, playoff_status_str):
        """Sets the playoff_status_str of this TeamEventStatus.

        An HTML formatter string suitable for display to the user containing the team's playoff status.  # noqa: E501

        :param playoff_status_str: The playoff_status_str of this TeamEventStatus.  # noqa: E501
        :type: str
        """

        self._playoff_status_str = playoff_status_str

    @property
    def overall_status_str(self):
        """Gets the overall_status_str of this TeamEventStatus.  # noqa: E501

        An HTML formatted string suitable for display to the user containing the team's overall status summary of the event.  # noqa: E501

        :return: The overall_status_str of this TeamEventStatus.  # noqa: E501
        :rtype: str
        """
        return self._overall_status_str

    @overall_status_str.setter
    def overall_status_str(self, overall_status_str):
        """Sets the overall_status_str of this TeamEventStatus.

        An HTML formatted string suitable for display to the user containing the team's overall status summary of the event.  # noqa: E501

        :param overall_status_str: The overall_status_str of this TeamEventStatus.  # noqa: E501
        :type: str
        """

        self._overall_status_str = overall_status_str

    @property
    def next_match_key(self):
        """Gets the next_match_key of this TeamEventStatus.  # noqa: E501

        TBA match key for the next match the team is scheduled to play in at this event, or null.  # noqa: E501

        :return: The next_match_key of this TeamEventStatus.  # noqa: E501
        :rtype: str
        """
        return self._next_match_key

    @next_match_key.setter
    def next_match_key(self, next_match_key):
        """Sets the next_match_key of this TeamEventStatus.

        TBA match key for the next match the team is scheduled to play in at this event, or null.  # noqa: E501

        :param next_match_key: The next_match_key of this TeamEventStatus.  # noqa: E501
        :type: str
        """

        self._next_match_key = next_match_key

    @property
    def last_match_key(self):
        """Gets the last_match_key of this TeamEventStatus.  # noqa: E501

        TBA match key for the last match the team played in at this event, or null.  # noqa: E501

        :return: The last_match_key of this TeamEventStatus.  # noqa: E501
        :rtype: str
        """
        return self._last_match_key

    @last_match_key.setter
    def last_match_key(self, last_match_key):
        """Sets the last_match_key of this TeamEventStatus.

        TBA match key for the last match the team played in at this event, or null.  # noqa: E501

        :param last_match_key: The last_match_key of this TeamEventStatus.  # noqa: E501
        :type: str
        """

        self._last_match_key = last_match_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeamEventStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TeamEventStatus):
            return True

        return self.to_dict() != other.to_dict()
