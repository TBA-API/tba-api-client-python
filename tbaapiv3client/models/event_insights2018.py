# coding: utf-8

"""
    The Blue Alliance API v3

    # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.  # noqa: E501

    The version of the OpenAPI document: 3.8.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tbaapiv3client.configuration import Configuration


class EventInsights2018(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'auto_quest_achieved': 'list[float]',
        'average_boost_played': 'float',
        'average_endgame_points': 'float',
        'average_force_played': 'float',
        'average_foul_score': 'float',
        'average_points_auto': 'float',
        'average_points_teleop': 'float',
        'average_run_points_auto': 'float',
        'average_scale_ownership_points': 'float',
        'average_scale_ownership_points_auto': 'float',
        'average_scale_ownership_points_teleop': 'float',
        'average_score': 'float',
        'average_switch_ownership_points': 'float',
        'average_switch_ownership_points_auto': 'float',
        'average_switch_ownership_points_teleop': 'float',
        'average_vault_points': 'float',
        'average_win_margin': 'float',
        'average_win_score': 'float',
        'boost_played_counts': 'list[float]',
        'climb_counts': 'list[float]',
        'face_the_boss_achieved': 'list[float]',
        'force_played_counts': 'list[float]',
        'high_score': 'list[str]',
        'levitate_played_counts': 'list[float]',
        'run_counts_auto': 'list[float]',
        'scale_neutral_percentage': 'float',
        'scale_neutral_percentage_auto': 'float',
        'scale_neutral_percentage_teleop': 'float',
        'switch_owned_counts_auto': 'list[float]',
        'unicorn_matches': 'list[float]',
        'winning_opp_switch_denial_percentage_teleop': 'float',
        'winning_own_switch_ownership_percentage': 'float',
        'winning_own_switch_ownership_percentage_auto': 'float',
        'winning_own_switch_ownership_percentage_teleop': 'float',
        'winning_scale_ownership_percentage': 'float',
        'winning_scale_ownership_percentage_auto': 'float',
        'winning_scale_ownership_percentage_teleop': 'float'
    }

    attribute_map = {
        'auto_quest_achieved': 'auto_quest_achieved',
        'average_boost_played': 'average_boost_played',
        'average_endgame_points': 'average_endgame_points',
        'average_force_played': 'average_force_played',
        'average_foul_score': 'average_foul_score',
        'average_points_auto': 'average_points_auto',
        'average_points_teleop': 'average_points_teleop',
        'average_run_points_auto': 'average_run_points_auto',
        'average_scale_ownership_points': 'average_scale_ownership_points',
        'average_scale_ownership_points_auto': 'average_scale_ownership_points_auto',
        'average_scale_ownership_points_teleop': 'average_scale_ownership_points_teleop',
        'average_score': 'average_score',
        'average_switch_ownership_points': 'average_switch_ownership_points',
        'average_switch_ownership_points_auto': 'average_switch_ownership_points_auto',
        'average_switch_ownership_points_teleop': 'average_switch_ownership_points_teleop',
        'average_vault_points': 'average_vault_points',
        'average_win_margin': 'average_win_margin',
        'average_win_score': 'average_win_score',
        'boost_played_counts': 'boost_played_counts',
        'climb_counts': 'climb_counts',
        'face_the_boss_achieved': 'face_the_boss_achieved',
        'force_played_counts': 'force_played_counts',
        'high_score': 'high_score',
        'levitate_played_counts': 'levitate_played_counts',
        'run_counts_auto': 'run_counts_auto',
        'scale_neutral_percentage': 'scale_neutral_percentage',
        'scale_neutral_percentage_auto': 'scale_neutral_percentage_auto',
        'scale_neutral_percentage_teleop': 'scale_neutral_percentage_teleop',
        'switch_owned_counts_auto': 'switch_owned_counts_auto',
        'unicorn_matches': 'unicorn_matches',
        'winning_opp_switch_denial_percentage_teleop': 'winning_opp_switch_denial_percentage_teleop',
        'winning_own_switch_ownership_percentage': 'winning_own_switch_ownership_percentage',
        'winning_own_switch_ownership_percentage_auto': 'winning_own_switch_ownership_percentage_auto',
        'winning_own_switch_ownership_percentage_teleop': 'winning_own_switch_ownership_percentage_teleop',
        'winning_scale_ownership_percentage': 'winning_scale_ownership_percentage',
        'winning_scale_ownership_percentage_auto': 'winning_scale_ownership_percentage_auto',
        'winning_scale_ownership_percentage_teleop': 'winning_scale_ownership_percentage_teleop'
    }

    def __init__(self, auto_quest_achieved=None, average_boost_played=None, average_endgame_points=None, average_force_played=None, average_foul_score=None, average_points_auto=None, average_points_teleop=None, average_run_points_auto=None, average_scale_ownership_points=None, average_scale_ownership_points_auto=None, average_scale_ownership_points_teleop=None, average_score=None, average_switch_ownership_points=None, average_switch_ownership_points_auto=None, average_switch_ownership_points_teleop=None, average_vault_points=None, average_win_margin=None, average_win_score=None, boost_played_counts=None, climb_counts=None, face_the_boss_achieved=None, force_played_counts=None, high_score=None, levitate_played_counts=None, run_counts_auto=None, scale_neutral_percentage=None, scale_neutral_percentage_auto=None, scale_neutral_percentage_teleop=None, switch_owned_counts_auto=None, unicorn_matches=None, winning_opp_switch_denial_percentage_teleop=None, winning_own_switch_ownership_percentage=None, winning_own_switch_ownership_percentage_auto=None, winning_own_switch_ownership_percentage_teleop=None, winning_scale_ownership_percentage=None, winning_scale_ownership_percentage_auto=None, winning_scale_ownership_percentage_teleop=None, local_vars_configuration=None):  # noqa: E501
        """EventInsights2018 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._auto_quest_achieved = None
        self._average_boost_played = None
        self._average_endgame_points = None
        self._average_force_played = None
        self._average_foul_score = None
        self._average_points_auto = None
        self._average_points_teleop = None
        self._average_run_points_auto = None
        self._average_scale_ownership_points = None
        self._average_scale_ownership_points_auto = None
        self._average_scale_ownership_points_teleop = None
        self._average_score = None
        self._average_switch_ownership_points = None
        self._average_switch_ownership_points_auto = None
        self._average_switch_ownership_points_teleop = None
        self._average_vault_points = None
        self._average_win_margin = None
        self._average_win_score = None
        self._boost_played_counts = None
        self._climb_counts = None
        self._face_the_boss_achieved = None
        self._force_played_counts = None
        self._high_score = None
        self._levitate_played_counts = None
        self._run_counts_auto = None
        self._scale_neutral_percentage = None
        self._scale_neutral_percentage_auto = None
        self._scale_neutral_percentage_teleop = None
        self._switch_owned_counts_auto = None
        self._unicorn_matches = None
        self._winning_opp_switch_denial_percentage_teleop = None
        self._winning_own_switch_ownership_percentage = None
        self._winning_own_switch_ownership_percentage_auto = None
        self._winning_own_switch_ownership_percentage_teleop = None
        self._winning_scale_ownership_percentage = None
        self._winning_scale_ownership_percentage_auto = None
        self._winning_scale_ownership_percentage_teleop = None
        self.discriminator = None

        self.auto_quest_achieved = auto_quest_achieved
        self.average_boost_played = average_boost_played
        self.average_endgame_points = average_endgame_points
        self.average_force_played = average_force_played
        self.average_foul_score = average_foul_score
        self.average_points_auto = average_points_auto
        self.average_points_teleop = average_points_teleop
        self.average_run_points_auto = average_run_points_auto
        self.average_scale_ownership_points = average_scale_ownership_points
        self.average_scale_ownership_points_auto = average_scale_ownership_points_auto
        self.average_scale_ownership_points_teleop = average_scale_ownership_points_teleop
        self.average_score = average_score
        self.average_switch_ownership_points = average_switch_ownership_points
        self.average_switch_ownership_points_auto = average_switch_ownership_points_auto
        self.average_switch_ownership_points_teleop = average_switch_ownership_points_teleop
        self.average_vault_points = average_vault_points
        self.average_win_margin = average_win_margin
        self.average_win_score = average_win_score
        self.boost_played_counts = boost_played_counts
        self.climb_counts = climb_counts
        self.face_the_boss_achieved = face_the_boss_achieved
        self.force_played_counts = force_played_counts
        self.high_score = high_score
        self.levitate_played_counts = levitate_played_counts
        self.run_counts_auto = run_counts_auto
        self.scale_neutral_percentage = scale_neutral_percentage
        self.scale_neutral_percentage_auto = scale_neutral_percentage_auto
        self.scale_neutral_percentage_teleop = scale_neutral_percentage_teleop
        self.switch_owned_counts_auto = switch_owned_counts_auto
        self.unicorn_matches = unicorn_matches
        self.winning_opp_switch_denial_percentage_teleop = winning_opp_switch_denial_percentage_teleop
        self.winning_own_switch_ownership_percentage = winning_own_switch_ownership_percentage
        self.winning_own_switch_ownership_percentage_auto = winning_own_switch_ownership_percentage_auto
        self.winning_own_switch_ownership_percentage_teleop = winning_own_switch_ownership_percentage_teleop
        self.winning_scale_ownership_percentage = winning_scale_ownership_percentage
        self.winning_scale_ownership_percentage_auto = winning_scale_ownership_percentage_auto
        self.winning_scale_ownership_percentage_teleop = winning_scale_ownership_percentage_teleop

    @property
    def auto_quest_achieved(self):
        """Gets the auto_quest_achieved of this EventInsights2018.  # noqa: E501

        An array with three values, number of times auto quest was completed, number of opportunities to complete the auto quest, and percentage.  # noqa: E501

        :return: The auto_quest_achieved of this EventInsights2018.  # noqa: E501
        :rtype: list[float]
        """
        return self._auto_quest_achieved

    @auto_quest_achieved.setter
    def auto_quest_achieved(self, auto_quest_achieved):
        """Sets the auto_quest_achieved of this EventInsights2018.

        An array with three values, number of times auto quest was completed, number of opportunities to complete the auto quest, and percentage.  # noqa: E501

        :param auto_quest_achieved: The auto_quest_achieved of this EventInsights2018.  # noqa: E501
        :type: list[float]
        """
        if self.local_vars_configuration.client_side_validation and auto_quest_achieved is None:  # noqa: E501
            raise ValueError("Invalid value for `auto_quest_achieved`, must not be `None`")  # noqa: E501

        self._auto_quest_achieved = auto_quest_achieved

    @property
    def average_boost_played(self):
        """Gets the average_boost_played of this EventInsights2018.  # noqa: E501

        Average number of boost power up scored (out of 3).  # noqa: E501

        :return: The average_boost_played of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._average_boost_played

    @average_boost_played.setter
    def average_boost_played(self, average_boost_played):
        """Sets the average_boost_played of this EventInsights2018.

        Average number of boost power up scored (out of 3).  # noqa: E501

        :param average_boost_played: The average_boost_played of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and average_boost_played is None:  # noqa: E501
            raise ValueError("Invalid value for `average_boost_played`, must not be `None`")  # noqa: E501

        self._average_boost_played = average_boost_played

    @property
    def average_endgame_points(self):
        """Gets the average_endgame_points of this EventInsights2018.  # noqa: E501

        Average endgame points.  # noqa: E501

        :return: The average_endgame_points of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._average_endgame_points

    @average_endgame_points.setter
    def average_endgame_points(self, average_endgame_points):
        """Sets the average_endgame_points of this EventInsights2018.

        Average endgame points.  # noqa: E501

        :param average_endgame_points: The average_endgame_points of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and average_endgame_points is None:  # noqa: E501
            raise ValueError("Invalid value for `average_endgame_points`, must not be `None`")  # noqa: E501

        self._average_endgame_points = average_endgame_points

    @property
    def average_force_played(self):
        """Gets the average_force_played of this EventInsights2018.  # noqa: E501

        Average number of force power up scored (out of 3).  # noqa: E501

        :return: The average_force_played of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._average_force_played

    @average_force_played.setter
    def average_force_played(self, average_force_played):
        """Sets the average_force_played of this EventInsights2018.

        Average number of force power up scored (out of 3).  # noqa: E501

        :param average_force_played: The average_force_played of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and average_force_played is None:  # noqa: E501
            raise ValueError("Invalid value for `average_force_played`, must not be `None`")  # noqa: E501

        self._average_force_played = average_force_played

    @property
    def average_foul_score(self):
        """Gets the average_foul_score of this EventInsights2018.  # noqa: E501

        Average foul score.  # noqa: E501

        :return: The average_foul_score of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._average_foul_score

    @average_foul_score.setter
    def average_foul_score(self, average_foul_score):
        """Sets the average_foul_score of this EventInsights2018.

        Average foul score.  # noqa: E501

        :param average_foul_score: The average_foul_score of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and average_foul_score is None:  # noqa: E501
            raise ValueError("Invalid value for `average_foul_score`, must not be `None`")  # noqa: E501

        self._average_foul_score = average_foul_score

    @property
    def average_points_auto(self):
        """Gets the average_points_auto of this EventInsights2018.  # noqa: E501

        Average points scored during auto.  # noqa: E501

        :return: The average_points_auto of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._average_points_auto

    @average_points_auto.setter
    def average_points_auto(self, average_points_auto):
        """Sets the average_points_auto of this EventInsights2018.

        Average points scored during auto.  # noqa: E501

        :param average_points_auto: The average_points_auto of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and average_points_auto is None:  # noqa: E501
            raise ValueError("Invalid value for `average_points_auto`, must not be `None`")  # noqa: E501

        self._average_points_auto = average_points_auto

    @property
    def average_points_teleop(self):
        """Gets the average_points_teleop of this EventInsights2018.  # noqa: E501

        Average points scored during teleop.  # noqa: E501

        :return: The average_points_teleop of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._average_points_teleop

    @average_points_teleop.setter
    def average_points_teleop(self, average_points_teleop):
        """Sets the average_points_teleop of this EventInsights2018.

        Average points scored during teleop.  # noqa: E501

        :param average_points_teleop: The average_points_teleop of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and average_points_teleop is None:  # noqa: E501
            raise ValueError("Invalid value for `average_points_teleop`, must not be `None`")  # noqa: E501

        self._average_points_teleop = average_points_teleop

    @property
    def average_run_points_auto(self):
        """Gets the average_run_points_auto of this EventInsights2018.  # noqa: E501

        Average mobility points scored during auto.  # noqa: E501

        :return: The average_run_points_auto of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._average_run_points_auto

    @average_run_points_auto.setter
    def average_run_points_auto(self, average_run_points_auto):
        """Sets the average_run_points_auto of this EventInsights2018.

        Average mobility points scored during auto.  # noqa: E501

        :param average_run_points_auto: The average_run_points_auto of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and average_run_points_auto is None:  # noqa: E501
            raise ValueError("Invalid value for `average_run_points_auto`, must not be `None`")  # noqa: E501

        self._average_run_points_auto = average_run_points_auto

    @property
    def average_scale_ownership_points(self):
        """Gets the average_scale_ownership_points of this EventInsights2018.  # noqa: E501

        Average scale ownership points scored.  # noqa: E501

        :return: The average_scale_ownership_points of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._average_scale_ownership_points

    @average_scale_ownership_points.setter
    def average_scale_ownership_points(self, average_scale_ownership_points):
        """Sets the average_scale_ownership_points of this EventInsights2018.

        Average scale ownership points scored.  # noqa: E501

        :param average_scale_ownership_points: The average_scale_ownership_points of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and average_scale_ownership_points is None:  # noqa: E501
            raise ValueError("Invalid value for `average_scale_ownership_points`, must not be `None`")  # noqa: E501

        self._average_scale_ownership_points = average_scale_ownership_points

    @property
    def average_scale_ownership_points_auto(self):
        """Gets the average_scale_ownership_points_auto of this EventInsights2018.  # noqa: E501

        Average scale ownership points scored during auto.  # noqa: E501

        :return: The average_scale_ownership_points_auto of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._average_scale_ownership_points_auto

    @average_scale_ownership_points_auto.setter
    def average_scale_ownership_points_auto(self, average_scale_ownership_points_auto):
        """Sets the average_scale_ownership_points_auto of this EventInsights2018.

        Average scale ownership points scored during auto.  # noqa: E501

        :param average_scale_ownership_points_auto: The average_scale_ownership_points_auto of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and average_scale_ownership_points_auto is None:  # noqa: E501
            raise ValueError("Invalid value for `average_scale_ownership_points_auto`, must not be `None`")  # noqa: E501

        self._average_scale_ownership_points_auto = average_scale_ownership_points_auto

    @property
    def average_scale_ownership_points_teleop(self):
        """Gets the average_scale_ownership_points_teleop of this EventInsights2018.  # noqa: E501

        Average scale ownership points scored during teleop.  # noqa: E501

        :return: The average_scale_ownership_points_teleop of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._average_scale_ownership_points_teleop

    @average_scale_ownership_points_teleop.setter
    def average_scale_ownership_points_teleop(self, average_scale_ownership_points_teleop):
        """Sets the average_scale_ownership_points_teleop of this EventInsights2018.

        Average scale ownership points scored during teleop.  # noqa: E501

        :param average_scale_ownership_points_teleop: The average_scale_ownership_points_teleop of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and average_scale_ownership_points_teleop is None:  # noqa: E501
            raise ValueError("Invalid value for `average_scale_ownership_points_teleop`, must not be `None`")  # noqa: E501

        self._average_scale_ownership_points_teleop = average_scale_ownership_points_teleop

    @property
    def average_score(self):
        """Gets the average_score of this EventInsights2018.  # noqa: E501

        Average score.  # noqa: E501

        :return: The average_score of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._average_score

    @average_score.setter
    def average_score(self, average_score):
        """Sets the average_score of this EventInsights2018.

        Average score.  # noqa: E501

        :param average_score: The average_score of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and average_score is None:  # noqa: E501
            raise ValueError("Invalid value for `average_score`, must not be `None`")  # noqa: E501

        self._average_score = average_score

    @property
    def average_switch_ownership_points(self):
        """Gets the average_switch_ownership_points of this EventInsights2018.  # noqa: E501

        Average switch ownership points scored.  # noqa: E501

        :return: The average_switch_ownership_points of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._average_switch_ownership_points

    @average_switch_ownership_points.setter
    def average_switch_ownership_points(self, average_switch_ownership_points):
        """Sets the average_switch_ownership_points of this EventInsights2018.

        Average switch ownership points scored.  # noqa: E501

        :param average_switch_ownership_points: The average_switch_ownership_points of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and average_switch_ownership_points is None:  # noqa: E501
            raise ValueError("Invalid value for `average_switch_ownership_points`, must not be `None`")  # noqa: E501

        self._average_switch_ownership_points = average_switch_ownership_points

    @property
    def average_switch_ownership_points_auto(self):
        """Gets the average_switch_ownership_points_auto of this EventInsights2018.  # noqa: E501

        Average switch ownership points scored during auto.  # noqa: E501

        :return: The average_switch_ownership_points_auto of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._average_switch_ownership_points_auto

    @average_switch_ownership_points_auto.setter
    def average_switch_ownership_points_auto(self, average_switch_ownership_points_auto):
        """Sets the average_switch_ownership_points_auto of this EventInsights2018.

        Average switch ownership points scored during auto.  # noqa: E501

        :param average_switch_ownership_points_auto: The average_switch_ownership_points_auto of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and average_switch_ownership_points_auto is None:  # noqa: E501
            raise ValueError("Invalid value for `average_switch_ownership_points_auto`, must not be `None`")  # noqa: E501

        self._average_switch_ownership_points_auto = average_switch_ownership_points_auto

    @property
    def average_switch_ownership_points_teleop(self):
        """Gets the average_switch_ownership_points_teleop of this EventInsights2018.  # noqa: E501

        Average switch ownership points scored during teleop.  # noqa: E501

        :return: The average_switch_ownership_points_teleop of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._average_switch_ownership_points_teleop

    @average_switch_ownership_points_teleop.setter
    def average_switch_ownership_points_teleop(self, average_switch_ownership_points_teleop):
        """Sets the average_switch_ownership_points_teleop of this EventInsights2018.

        Average switch ownership points scored during teleop.  # noqa: E501

        :param average_switch_ownership_points_teleop: The average_switch_ownership_points_teleop of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and average_switch_ownership_points_teleop is None:  # noqa: E501
            raise ValueError("Invalid value for `average_switch_ownership_points_teleop`, must not be `None`")  # noqa: E501

        self._average_switch_ownership_points_teleop = average_switch_ownership_points_teleop

    @property
    def average_vault_points(self):
        """Gets the average_vault_points of this EventInsights2018.  # noqa: E501

        Average value points scored.  # noqa: E501

        :return: The average_vault_points of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._average_vault_points

    @average_vault_points.setter
    def average_vault_points(self, average_vault_points):
        """Sets the average_vault_points of this EventInsights2018.

        Average value points scored.  # noqa: E501

        :param average_vault_points: The average_vault_points of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and average_vault_points is None:  # noqa: E501
            raise ValueError("Invalid value for `average_vault_points`, must not be `None`")  # noqa: E501

        self._average_vault_points = average_vault_points

    @property
    def average_win_margin(self):
        """Gets the average_win_margin of this EventInsights2018.  # noqa: E501

        Average margin of victory.  # noqa: E501

        :return: The average_win_margin of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._average_win_margin

    @average_win_margin.setter
    def average_win_margin(self, average_win_margin):
        """Sets the average_win_margin of this EventInsights2018.

        Average margin of victory.  # noqa: E501

        :param average_win_margin: The average_win_margin of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and average_win_margin is None:  # noqa: E501
            raise ValueError("Invalid value for `average_win_margin`, must not be `None`")  # noqa: E501

        self._average_win_margin = average_win_margin

    @property
    def average_win_score(self):
        """Gets the average_win_score of this EventInsights2018.  # noqa: E501

        Average winning score.  # noqa: E501

        :return: The average_win_score of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._average_win_score

    @average_win_score.setter
    def average_win_score(self, average_win_score):
        """Sets the average_win_score of this EventInsights2018.

        Average winning score.  # noqa: E501

        :param average_win_score: The average_win_score of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and average_win_score is None:  # noqa: E501
            raise ValueError("Invalid value for `average_win_score`, must not be `None`")  # noqa: E501

        self._average_win_score = average_win_score

    @property
    def boost_played_counts(self):
        """Gets the boost_played_counts of this EventInsights2018.  # noqa: E501

        An array with three values, number of times a boost power up was played, number of opportunities to play a boost power up, and percentage.  # noqa: E501

        :return: The boost_played_counts of this EventInsights2018.  # noqa: E501
        :rtype: list[float]
        """
        return self._boost_played_counts

    @boost_played_counts.setter
    def boost_played_counts(self, boost_played_counts):
        """Sets the boost_played_counts of this EventInsights2018.

        An array with three values, number of times a boost power up was played, number of opportunities to play a boost power up, and percentage.  # noqa: E501

        :param boost_played_counts: The boost_played_counts of this EventInsights2018.  # noqa: E501
        :type: list[float]
        """
        if self.local_vars_configuration.client_side_validation and boost_played_counts is None:  # noqa: E501
            raise ValueError("Invalid value for `boost_played_counts`, must not be `None`")  # noqa: E501

        self._boost_played_counts = boost_played_counts

    @property
    def climb_counts(self):
        """Gets the climb_counts of this EventInsights2018.  # noqa: E501

        An array with three values, number of times a climb occurred, number of opportunities to climb, and percentage.  # noqa: E501

        :return: The climb_counts of this EventInsights2018.  # noqa: E501
        :rtype: list[float]
        """
        return self._climb_counts

    @climb_counts.setter
    def climb_counts(self, climb_counts):
        """Sets the climb_counts of this EventInsights2018.

        An array with three values, number of times a climb occurred, number of opportunities to climb, and percentage.  # noqa: E501

        :param climb_counts: The climb_counts of this EventInsights2018.  # noqa: E501
        :type: list[float]
        """
        if self.local_vars_configuration.client_side_validation and climb_counts is None:  # noqa: E501
            raise ValueError("Invalid value for `climb_counts`, must not be `None`")  # noqa: E501

        self._climb_counts = climb_counts

    @property
    def face_the_boss_achieved(self):
        """Gets the face_the_boss_achieved of this EventInsights2018.  # noqa: E501

        An array with three values, number of times an alliance faced the boss, number of opportunities to face the boss, and percentage.  # noqa: E501

        :return: The face_the_boss_achieved of this EventInsights2018.  # noqa: E501
        :rtype: list[float]
        """
        return self._face_the_boss_achieved

    @face_the_boss_achieved.setter
    def face_the_boss_achieved(self, face_the_boss_achieved):
        """Sets the face_the_boss_achieved of this EventInsights2018.

        An array with three values, number of times an alliance faced the boss, number of opportunities to face the boss, and percentage.  # noqa: E501

        :param face_the_boss_achieved: The face_the_boss_achieved of this EventInsights2018.  # noqa: E501
        :type: list[float]
        """
        if self.local_vars_configuration.client_side_validation and face_the_boss_achieved is None:  # noqa: E501
            raise ValueError("Invalid value for `face_the_boss_achieved`, must not be `None`")  # noqa: E501

        self._face_the_boss_achieved = face_the_boss_achieved

    @property
    def force_played_counts(self):
        """Gets the force_played_counts of this EventInsights2018.  # noqa: E501

        An array with three values, number of times a force power up was played, number of opportunities to play a force power up, and percentage.  # noqa: E501

        :return: The force_played_counts of this EventInsights2018.  # noqa: E501
        :rtype: list[float]
        """
        return self._force_played_counts

    @force_played_counts.setter
    def force_played_counts(self, force_played_counts):
        """Sets the force_played_counts of this EventInsights2018.

        An array with three values, number of times a force power up was played, number of opportunities to play a force power up, and percentage.  # noqa: E501

        :param force_played_counts: The force_played_counts of this EventInsights2018.  # noqa: E501
        :type: list[float]
        """
        if self.local_vars_configuration.client_side_validation and force_played_counts is None:  # noqa: E501
            raise ValueError("Invalid value for `force_played_counts`, must not be `None`")  # noqa: E501

        self._force_played_counts = force_played_counts

    @property
    def high_score(self):
        """Gets the high_score of this EventInsights2018.  # noqa: E501

        An array with three values, high score, match key from the match with the high score, and the name of the match  # noqa: E501

        :return: The high_score of this EventInsights2018.  # noqa: E501
        :rtype: list[str]
        """
        return self._high_score

    @high_score.setter
    def high_score(self, high_score):
        """Sets the high_score of this EventInsights2018.

        An array with three values, high score, match key from the match with the high score, and the name of the match  # noqa: E501

        :param high_score: The high_score of this EventInsights2018.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and high_score is None:  # noqa: E501
            raise ValueError("Invalid value for `high_score`, must not be `None`")  # noqa: E501

        self._high_score = high_score

    @property
    def levitate_played_counts(self):
        """Gets the levitate_played_counts of this EventInsights2018.  # noqa: E501

        An array with three values, number of times a levitate power up was played, number of opportunities to play a levitate power up, and percentage.  # noqa: E501

        :return: The levitate_played_counts of this EventInsights2018.  # noqa: E501
        :rtype: list[float]
        """
        return self._levitate_played_counts

    @levitate_played_counts.setter
    def levitate_played_counts(self, levitate_played_counts):
        """Sets the levitate_played_counts of this EventInsights2018.

        An array with three values, number of times a levitate power up was played, number of opportunities to play a levitate power up, and percentage.  # noqa: E501

        :param levitate_played_counts: The levitate_played_counts of this EventInsights2018.  # noqa: E501
        :type: list[float]
        """
        if self.local_vars_configuration.client_side_validation and levitate_played_counts is None:  # noqa: E501
            raise ValueError("Invalid value for `levitate_played_counts`, must not be `None`")  # noqa: E501

        self._levitate_played_counts = levitate_played_counts

    @property
    def run_counts_auto(self):
        """Gets the run_counts_auto of this EventInsights2018.  # noqa: E501

        An array with three values, number of times a team scored mobility points in auto, number of opportunities to score mobility points in auto, and percentage.  # noqa: E501

        :return: The run_counts_auto of this EventInsights2018.  # noqa: E501
        :rtype: list[float]
        """
        return self._run_counts_auto

    @run_counts_auto.setter
    def run_counts_auto(self, run_counts_auto):
        """Sets the run_counts_auto of this EventInsights2018.

        An array with three values, number of times a team scored mobility points in auto, number of opportunities to score mobility points in auto, and percentage.  # noqa: E501

        :param run_counts_auto: The run_counts_auto of this EventInsights2018.  # noqa: E501
        :type: list[float]
        """
        if self.local_vars_configuration.client_side_validation and run_counts_auto is None:  # noqa: E501
            raise ValueError("Invalid value for `run_counts_auto`, must not be `None`")  # noqa: E501

        self._run_counts_auto = run_counts_auto

    @property
    def scale_neutral_percentage(self):
        """Gets the scale_neutral_percentage of this EventInsights2018.  # noqa: E501

        Average scale neutral percentage.  # noqa: E501

        :return: The scale_neutral_percentage of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._scale_neutral_percentage

    @scale_neutral_percentage.setter
    def scale_neutral_percentage(self, scale_neutral_percentage):
        """Sets the scale_neutral_percentage of this EventInsights2018.

        Average scale neutral percentage.  # noqa: E501

        :param scale_neutral_percentage: The scale_neutral_percentage of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and scale_neutral_percentage is None:  # noqa: E501
            raise ValueError("Invalid value for `scale_neutral_percentage`, must not be `None`")  # noqa: E501

        self._scale_neutral_percentage = scale_neutral_percentage

    @property
    def scale_neutral_percentage_auto(self):
        """Gets the scale_neutral_percentage_auto of this EventInsights2018.  # noqa: E501

        Average scale neutral percentage during auto.  # noqa: E501

        :return: The scale_neutral_percentage_auto of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._scale_neutral_percentage_auto

    @scale_neutral_percentage_auto.setter
    def scale_neutral_percentage_auto(self, scale_neutral_percentage_auto):
        """Sets the scale_neutral_percentage_auto of this EventInsights2018.

        Average scale neutral percentage during auto.  # noqa: E501

        :param scale_neutral_percentage_auto: The scale_neutral_percentage_auto of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and scale_neutral_percentage_auto is None:  # noqa: E501
            raise ValueError("Invalid value for `scale_neutral_percentage_auto`, must not be `None`")  # noqa: E501

        self._scale_neutral_percentage_auto = scale_neutral_percentage_auto

    @property
    def scale_neutral_percentage_teleop(self):
        """Gets the scale_neutral_percentage_teleop of this EventInsights2018.  # noqa: E501

        Average scale neutral percentage during teleop.  # noqa: E501

        :return: The scale_neutral_percentage_teleop of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._scale_neutral_percentage_teleop

    @scale_neutral_percentage_teleop.setter
    def scale_neutral_percentage_teleop(self, scale_neutral_percentage_teleop):
        """Sets the scale_neutral_percentage_teleop of this EventInsights2018.

        Average scale neutral percentage during teleop.  # noqa: E501

        :param scale_neutral_percentage_teleop: The scale_neutral_percentage_teleop of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and scale_neutral_percentage_teleop is None:  # noqa: E501
            raise ValueError("Invalid value for `scale_neutral_percentage_teleop`, must not be `None`")  # noqa: E501

        self._scale_neutral_percentage_teleop = scale_neutral_percentage_teleop

    @property
    def switch_owned_counts_auto(self):
        """Gets the switch_owned_counts_auto of this EventInsights2018.  # noqa: E501

        An array with three values, number of times a switch was owned during auto, number of opportunities to own a switch during auto, and percentage.  # noqa: E501

        :return: The switch_owned_counts_auto of this EventInsights2018.  # noqa: E501
        :rtype: list[float]
        """
        return self._switch_owned_counts_auto

    @switch_owned_counts_auto.setter
    def switch_owned_counts_auto(self, switch_owned_counts_auto):
        """Sets the switch_owned_counts_auto of this EventInsights2018.

        An array with three values, number of times a switch was owned during auto, number of opportunities to own a switch during auto, and percentage.  # noqa: E501

        :param switch_owned_counts_auto: The switch_owned_counts_auto of this EventInsights2018.  # noqa: E501
        :type: list[float]
        """
        if self.local_vars_configuration.client_side_validation and switch_owned_counts_auto is None:  # noqa: E501
            raise ValueError("Invalid value for `switch_owned_counts_auto`, must not be `None`")  # noqa: E501

        self._switch_owned_counts_auto = switch_owned_counts_auto

    @property
    def unicorn_matches(self):
        """Gets the unicorn_matches of this EventInsights2018.  # noqa: E501

        An array with three values, number of times a unicorn match (Win + Auto Quest + Face the Boss) occurred, number of opportunities to have a unicorn match, and percentage.  # noqa: E501

        :return: The unicorn_matches of this EventInsights2018.  # noqa: E501
        :rtype: list[float]
        """
        return self._unicorn_matches

    @unicorn_matches.setter
    def unicorn_matches(self, unicorn_matches):
        """Sets the unicorn_matches of this EventInsights2018.

        An array with three values, number of times a unicorn match (Win + Auto Quest + Face the Boss) occurred, number of opportunities to have a unicorn match, and percentage.  # noqa: E501

        :param unicorn_matches: The unicorn_matches of this EventInsights2018.  # noqa: E501
        :type: list[float]
        """
        if self.local_vars_configuration.client_side_validation and unicorn_matches is None:  # noqa: E501
            raise ValueError("Invalid value for `unicorn_matches`, must not be `None`")  # noqa: E501

        self._unicorn_matches = unicorn_matches

    @property
    def winning_opp_switch_denial_percentage_teleop(self):
        """Gets the winning_opp_switch_denial_percentage_teleop of this EventInsights2018.  # noqa: E501

        Average opposing switch denail percentage for the winning alliance during teleop.  # noqa: E501

        :return: The winning_opp_switch_denial_percentage_teleop of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._winning_opp_switch_denial_percentage_teleop

    @winning_opp_switch_denial_percentage_teleop.setter
    def winning_opp_switch_denial_percentage_teleop(self, winning_opp_switch_denial_percentage_teleop):
        """Sets the winning_opp_switch_denial_percentage_teleop of this EventInsights2018.

        Average opposing switch denail percentage for the winning alliance during teleop.  # noqa: E501

        :param winning_opp_switch_denial_percentage_teleop: The winning_opp_switch_denial_percentage_teleop of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and winning_opp_switch_denial_percentage_teleop is None:  # noqa: E501
            raise ValueError("Invalid value for `winning_opp_switch_denial_percentage_teleop`, must not be `None`")  # noqa: E501

        self._winning_opp_switch_denial_percentage_teleop = winning_opp_switch_denial_percentage_teleop

    @property
    def winning_own_switch_ownership_percentage(self):
        """Gets the winning_own_switch_ownership_percentage of this EventInsights2018.  # noqa: E501

        Average own switch ownership percentage for the winning alliance.  # noqa: E501

        :return: The winning_own_switch_ownership_percentage of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._winning_own_switch_ownership_percentage

    @winning_own_switch_ownership_percentage.setter
    def winning_own_switch_ownership_percentage(self, winning_own_switch_ownership_percentage):
        """Sets the winning_own_switch_ownership_percentage of this EventInsights2018.

        Average own switch ownership percentage for the winning alliance.  # noqa: E501

        :param winning_own_switch_ownership_percentage: The winning_own_switch_ownership_percentage of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and winning_own_switch_ownership_percentage is None:  # noqa: E501
            raise ValueError("Invalid value for `winning_own_switch_ownership_percentage`, must not be `None`")  # noqa: E501

        self._winning_own_switch_ownership_percentage = winning_own_switch_ownership_percentage

    @property
    def winning_own_switch_ownership_percentage_auto(self):
        """Gets the winning_own_switch_ownership_percentage_auto of this EventInsights2018.  # noqa: E501

        Average own switch ownership percentage for the winning alliance during auto.  # noqa: E501

        :return: The winning_own_switch_ownership_percentage_auto of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._winning_own_switch_ownership_percentage_auto

    @winning_own_switch_ownership_percentage_auto.setter
    def winning_own_switch_ownership_percentage_auto(self, winning_own_switch_ownership_percentage_auto):
        """Sets the winning_own_switch_ownership_percentage_auto of this EventInsights2018.

        Average own switch ownership percentage for the winning alliance during auto.  # noqa: E501

        :param winning_own_switch_ownership_percentage_auto: The winning_own_switch_ownership_percentage_auto of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and winning_own_switch_ownership_percentage_auto is None:  # noqa: E501
            raise ValueError("Invalid value for `winning_own_switch_ownership_percentage_auto`, must not be `None`")  # noqa: E501

        self._winning_own_switch_ownership_percentage_auto = winning_own_switch_ownership_percentage_auto

    @property
    def winning_own_switch_ownership_percentage_teleop(self):
        """Gets the winning_own_switch_ownership_percentage_teleop of this EventInsights2018.  # noqa: E501

        Average own switch ownership percentage for the winning alliance during teleop.  # noqa: E501

        :return: The winning_own_switch_ownership_percentage_teleop of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._winning_own_switch_ownership_percentage_teleop

    @winning_own_switch_ownership_percentage_teleop.setter
    def winning_own_switch_ownership_percentage_teleop(self, winning_own_switch_ownership_percentage_teleop):
        """Sets the winning_own_switch_ownership_percentage_teleop of this EventInsights2018.

        Average own switch ownership percentage for the winning alliance during teleop.  # noqa: E501

        :param winning_own_switch_ownership_percentage_teleop: The winning_own_switch_ownership_percentage_teleop of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and winning_own_switch_ownership_percentage_teleop is None:  # noqa: E501
            raise ValueError("Invalid value for `winning_own_switch_ownership_percentage_teleop`, must not be `None`")  # noqa: E501

        self._winning_own_switch_ownership_percentage_teleop = winning_own_switch_ownership_percentage_teleop

    @property
    def winning_scale_ownership_percentage(self):
        """Gets the winning_scale_ownership_percentage of this EventInsights2018.  # noqa: E501

        Average scale ownership percentage for the winning alliance.  # noqa: E501

        :return: The winning_scale_ownership_percentage of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._winning_scale_ownership_percentage

    @winning_scale_ownership_percentage.setter
    def winning_scale_ownership_percentage(self, winning_scale_ownership_percentage):
        """Sets the winning_scale_ownership_percentage of this EventInsights2018.

        Average scale ownership percentage for the winning alliance.  # noqa: E501

        :param winning_scale_ownership_percentage: The winning_scale_ownership_percentage of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and winning_scale_ownership_percentage is None:  # noqa: E501
            raise ValueError("Invalid value for `winning_scale_ownership_percentage`, must not be `None`")  # noqa: E501

        self._winning_scale_ownership_percentage = winning_scale_ownership_percentage

    @property
    def winning_scale_ownership_percentage_auto(self):
        """Gets the winning_scale_ownership_percentage_auto of this EventInsights2018.  # noqa: E501

        Average scale ownership percentage for the winning alliance during auto.  # noqa: E501

        :return: The winning_scale_ownership_percentage_auto of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._winning_scale_ownership_percentage_auto

    @winning_scale_ownership_percentage_auto.setter
    def winning_scale_ownership_percentage_auto(self, winning_scale_ownership_percentage_auto):
        """Sets the winning_scale_ownership_percentage_auto of this EventInsights2018.

        Average scale ownership percentage for the winning alliance during auto.  # noqa: E501

        :param winning_scale_ownership_percentage_auto: The winning_scale_ownership_percentage_auto of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and winning_scale_ownership_percentage_auto is None:  # noqa: E501
            raise ValueError("Invalid value for `winning_scale_ownership_percentage_auto`, must not be `None`")  # noqa: E501

        self._winning_scale_ownership_percentage_auto = winning_scale_ownership_percentage_auto

    @property
    def winning_scale_ownership_percentage_teleop(self):
        """Gets the winning_scale_ownership_percentage_teleop of this EventInsights2018.  # noqa: E501

        Average scale ownership percentage for the winning alliance during teleop.  # noqa: E501

        :return: The winning_scale_ownership_percentage_teleop of this EventInsights2018.  # noqa: E501
        :rtype: float
        """
        return self._winning_scale_ownership_percentage_teleop

    @winning_scale_ownership_percentage_teleop.setter
    def winning_scale_ownership_percentage_teleop(self, winning_scale_ownership_percentage_teleop):
        """Sets the winning_scale_ownership_percentage_teleop of this EventInsights2018.

        Average scale ownership percentage for the winning alliance during teleop.  # noqa: E501

        :param winning_scale_ownership_percentage_teleop: The winning_scale_ownership_percentage_teleop of this EventInsights2018.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and winning_scale_ownership_percentage_teleop is None:  # noqa: E501
            raise ValueError("Invalid value for `winning_scale_ownership_percentage_teleop`, must not be `None`")  # noqa: E501

        self._winning_scale_ownership_percentage_teleop = winning_scale_ownership_percentage_teleop

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventInsights2018):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EventInsights2018):
            return True

        return self.to_dict() != other.to_dict()
