# coding: utf-8

"""
    The Blue Alliance API v3

    # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.  # noqa: E501

    The version of the OpenAPI document: 3.8.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tbaapiv3client.configuration import Configuration


class TeamEventStatusRank(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'num_teams': 'int',
        'ranking': 'TeamEventStatusRankRanking',
        'sort_order_info': 'list[TeamEventStatusRankSortOrderInfo]',
        'status': 'str'
    }

    attribute_map = {
        'num_teams': 'num_teams',
        'ranking': 'ranking',
        'sort_order_info': 'sort_order_info',
        'status': 'status'
    }

    def __init__(self, num_teams=None, ranking=None, sort_order_info=None, status=None, local_vars_configuration=None):  # noqa: E501
        """TeamEventStatusRank - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._num_teams = None
        self._ranking = None
        self._sort_order_info = None
        self._status = None
        self.discriminator = None

        if num_teams is not None:
            self.num_teams = num_teams
        if ranking is not None:
            self.ranking = ranking
        if sort_order_info is not None:
            self.sort_order_info = sort_order_info
        if status is not None:
            self.status = status

    @property
    def num_teams(self):
        """Gets the num_teams of this TeamEventStatusRank.  # noqa: E501

        Number of teams ranked.  # noqa: E501

        :return: The num_teams of this TeamEventStatusRank.  # noqa: E501
        :rtype: int
        """
        return self._num_teams

    @num_teams.setter
    def num_teams(self, num_teams):
        """Sets the num_teams of this TeamEventStatusRank.

        Number of teams ranked.  # noqa: E501

        :param num_teams: The num_teams of this TeamEventStatusRank.  # noqa: E501
        :type: int
        """

        self._num_teams = num_teams

    @property
    def ranking(self):
        """Gets the ranking of this TeamEventStatusRank.  # noqa: E501


        :return: The ranking of this TeamEventStatusRank.  # noqa: E501
        :rtype: TeamEventStatusRankRanking
        """
        return self._ranking

    @ranking.setter
    def ranking(self, ranking):
        """Sets the ranking of this TeamEventStatusRank.


        :param ranking: The ranking of this TeamEventStatusRank.  # noqa: E501
        :type: TeamEventStatusRankRanking
        """

        self._ranking = ranking

    @property
    def sort_order_info(self):
        """Gets the sort_order_info of this TeamEventStatusRank.  # noqa: E501

        Ordered list of names corresponding to the elements of the `sort_orders` array.  # noqa: E501

        :return: The sort_order_info of this TeamEventStatusRank.  # noqa: E501
        :rtype: list[TeamEventStatusRankSortOrderInfo]
        """
        return self._sort_order_info

    @sort_order_info.setter
    def sort_order_info(self, sort_order_info):
        """Sets the sort_order_info of this TeamEventStatusRank.

        Ordered list of names corresponding to the elements of the `sort_orders` array.  # noqa: E501

        :param sort_order_info: The sort_order_info of this TeamEventStatusRank.  # noqa: E501
        :type: list[TeamEventStatusRankSortOrderInfo]
        """

        self._sort_order_info = sort_order_info

    @property
    def status(self):
        """Gets the status of this TeamEventStatusRank.  # noqa: E501


        :return: The status of this TeamEventStatusRank.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TeamEventStatusRank.


        :param status: The status of this TeamEventStatusRank.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeamEventStatusRank):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TeamEventStatusRank):
            return True

        return self.to_dict() != other.to_dict()
