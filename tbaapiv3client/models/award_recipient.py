# coding: utf-8

"""
    The Blue Alliance API v3

    # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.  # noqa: E501

    The version of the OpenAPI document: 3.8.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tbaapiv3client.configuration import Configuration


class AwardRecipient(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'team_key': 'str',
        'awardee': 'str'
    }

    attribute_map = {
        'team_key': 'team_key',
        'awardee': 'awardee'
    }

    def __init__(self, team_key=None, awardee=None, local_vars_configuration=None):  # noqa: E501
        """AwardRecipient - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._team_key = None
        self._awardee = None
        self.discriminator = None

        if team_key is not None:
            self.team_key = team_key
        if awardee is not None:
            self.awardee = awardee

    @property
    def team_key(self):
        """Gets the team_key of this AwardRecipient.  # noqa: E501

        The TBA team key for the team that was given the award. May be null.  # noqa: E501

        :return: The team_key of this AwardRecipient.  # noqa: E501
        :rtype: str
        """
        return self._team_key

    @team_key.setter
    def team_key(self, team_key):
        """Sets the team_key of this AwardRecipient.

        The TBA team key for the team that was given the award. May be null.  # noqa: E501

        :param team_key: The team_key of this AwardRecipient.  # noqa: E501
        :type: str
        """

        self._team_key = team_key

    @property
    def awardee(self):
        """Gets the awardee of this AwardRecipient.  # noqa: E501

        The name of the individual given the award. May be null.  # noqa: E501

        :return: The awardee of this AwardRecipient.  # noqa: E501
        :rtype: str
        """
        return self._awardee

    @awardee.setter
    def awardee(self, awardee):
        """Sets the awardee of this AwardRecipient.

        The name of the individual given the award. May be null.  # noqa: E501

        :param awardee: The awardee of this AwardRecipient.  # noqa: E501
        :type: str
        """

        self._awardee = awardee

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwardRecipient):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AwardRecipient):
            return True

        return self.to_dict() != other.to_dict()
