# coding: utf-8

"""
    The Blue Alliance API v3

    # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.  # noqa: E501

    The version of the OpenAPI document: 3.8.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tbaapiv3client.configuration import Configuration


class MatchScoreBreakdown2019Alliance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'adjust_points': 'int',
        'auto_points': 'int',
        'bay1': 'str',
        'bay2': 'str',
        'bay3': 'str',
        'bay4': 'str',
        'bay5': 'str',
        'bay6': 'str',
        'bay7': 'str',
        'bay8': 'str',
        'cargo_points': 'int',
        'complete_rocket_ranking_point': 'bool',
        'completed_rocket_far': 'bool',
        'completed_rocket_near': 'bool',
        'endgame_robot1': 'str',
        'endgame_robot2': 'str',
        'endgame_robot3': 'str',
        'foul_count': 'int',
        'foul_points': 'int',
        'hab_climb_points': 'int',
        'hab_docking_ranking_point': 'bool',
        'hab_line_robot1': 'str',
        'hab_line_robot2': 'str',
        'hab_line_robot3': 'str',
        'hatch_panel_points': 'int',
        'low_left_rocket_far': 'str',
        'low_left_rocket_near': 'str',
        'low_right_rocket_far': 'str',
        'low_right_rocket_near': 'str',
        'mid_left_rocket_far': 'str',
        'mid_left_rocket_near': 'str',
        'mid_right_rocket_far': 'str',
        'mid_right_rocket_near': 'str',
        'pre_match_bay1': 'str',
        'pre_match_bay2': 'str',
        'pre_match_bay3': 'str',
        'pre_match_bay6': 'str',
        'pre_match_bay7': 'str',
        'pre_match_bay8': 'str',
        'pre_match_level_robot1': 'str',
        'pre_match_level_robot2': 'str',
        'pre_match_level_robot3': 'str',
        'rp': 'int',
        'sand_storm_bonus_points': 'int',
        'tech_foul_count': 'int',
        'teleop_points': 'int',
        'top_left_rocket_far': 'str',
        'top_left_rocket_near': 'str',
        'top_right_rocket_far': 'str',
        'top_right_rocket_near': 'str',
        'total_points': 'int'
    }

    attribute_map = {
        'adjust_points': 'adjustPoints',
        'auto_points': 'autoPoints',
        'bay1': 'bay1',
        'bay2': 'bay2',
        'bay3': 'bay3',
        'bay4': 'bay4',
        'bay5': 'bay5',
        'bay6': 'bay6',
        'bay7': 'bay7',
        'bay8': 'bay8',
        'cargo_points': 'cargoPoints',
        'complete_rocket_ranking_point': 'completeRocketRankingPoint',
        'completed_rocket_far': 'completedRocketFar',
        'completed_rocket_near': 'completedRocketNear',
        'endgame_robot1': 'endgameRobot1',
        'endgame_robot2': 'endgameRobot2',
        'endgame_robot3': 'endgameRobot3',
        'foul_count': 'foulCount',
        'foul_points': 'foulPoints',
        'hab_climb_points': 'habClimbPoints',
        'hab_docking_ranking_point': 'habDockingRankingPoint',
        'hab_line_robot1': 'habLineRobot1',
        'hab_line_robot2': 'habLineRobot2',
        'hab_line_robot3': 'habLineRobot3',
        'hatch_panel_points': 'hatchPanelPoints',
        'low_left_rocket_far': 'lowLeftRocketFar',
        'low_left_rocket_near': 'lowLeftRocketNear',
        'low_right_rocket_far': 'lowRightRocketFar',
        'low_right_rocket_near': 'lowRightRocketNear',
        'mid_left_rocket_far': 'midLeftRocketFar',
        'mid_left_rocket_near': 'midLeftRocketNear',
        'mid_right_rocket_far': 'midRightRocketFar',
        'mid_right_rocket_near': 'midRightRocketNear',
        'pre_match_bay1': 'preMatchBay1',
        'pre_match_bay2': 'preMatchBay2',
        'pre_match_bay3': 'preMatchBay3',
        'pre_match_bay6': 'preMatchBay6',
        'pre_match_bay7': 'preMatchBay7',
        'pre_match_bay8': 'preMatchBay8',
        'pre_match_level_robot1': 'preMatchLevelRobot1',
        'pre_match_level_robot2': 'preMatchLevelRobot2',
        'pre_match_level_robot3': 'preMatchLevelRobot3',
        'rp': 'rp',
        'sand_storm_bonus_points': 'sandStormBonusPoints',
        'tech_foul_count': 'techFoulCount',
        'teleop_points': 'teleopPoints',
        'top_left_rocket_far': 'topLeftRocketFar',
        'top_left_rocket_near': 'topLeftRocketNear',
        'top_right_rocket_far': 'topRightRocketFar',
        'top_right_rocket_near': 'topRightRocketNear',
        'total_points': 'totalPoints'
    }

    def __init__(self, adjust_points=None, auto_points=None, bay1=None, bay2=None, bay3=None, bay4=None, bay5=None, bay6=None, bay7=None, bay8=None, cargo_points=None, complete_rocket_ranking_point=None, completed_rocket_far=None, completed_rocket_near=None, endgame_robot1=None, endgame_robot2=None, endgame_robot3=None, foul_count=None, foul_points=None, hab_climb_points=None, hab_docking_ranking_point=None, hab_line_robot1=None, hab_line_robot2=None, hab_line_robot3=None, hatch_panel_points=None, low_left_rocket_far=None, low_left_rocket_near=None, low_right_rocket_far=None, low_right_rocket_near=None, mid_left_rocket_far=None, mid_left_rocket_near=None, mid_right_rocket_far=None, mid_right_rocket_near=None, pre_match_bay1=None, pre_match_bay2=None, pre_match_bay3=None, pre_match_bay6=None, pre_match_bay7=None, pre_match_bay8=None, pre_match_level_robot1=None, pre_match_level_robot2=None, pre_match_level_robot3=None, rp=None, sand_storm_bonus_points=None, tech_foul_count=None, teleop_points=None, top_left_rocket_far=None, top_left_rocket_near=None, top_right_rocket_far=None, top_right_rocket_near=None, total_points=None, local_vars_configuration=None):  # noqa: E501
        """MatchScoreBreakdown2019Alliance - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._adjust_points = None
        self._auto_points = None
        self._bay1 = None
        self._bay2 = None
        self._bay3 = None
        self._bay4 = None
        self._bay5 = None
        self._bay6 = None
        self._bay7 = None
        self._bay8 = None
        self._cargo_points = None
        self._complete_rocket_ranking_point = None
        self._completed_rocket_far = None
        self._completed_rocket_near = None
        self._endgame_robot1 = None
        self._endgame_robot2 = None
        self._endgame_robot3 = None
        self._foul_count = None
        self._foul_points = None
        self._hab_climb_points = None
        self._hab_docking_ranking_point = None
        self._hab_line_robot1 = None
        self._hab_line_robot2 = None
        self._hab_line_robot3 = None
        self._hatch_panel_points = None
        self._low_left_rocket_far = None
        self._low_left_rocket_near = None
        self._low_right_rocket_far = None
        self._low_right_rocket_near = None
        self._mid_left_rocket_far = None
        self._mid_left_rocket_near = None
        self._mid_right_rocket_far = None
        self._mid_right_rocket_near = None
        self._pre_match_bay1 = None
        self._pre_match_bay2 = None
        self._pre_match_bay3 = None
        self._pre_match_bay6 = None
        self._pre_match_bay7 = None
        self._pre_match_bay8 = None
        self._pre_match_level_robot1 = None
        self._pre_match_level_robot2 = None
        self._pre_match_level_robot3 = None
        self._rp = None
        self._sand_storm_bonus_points = None
        self._tech_foul_count = None
        self._teleop_points = None
        self._top_left_rocket_far = None
        self._top_left_rocket_near = None
        self._top_right_rocket_far = None
        self._top_right_rocket_near = None
        self._total_points = None
        self.discriminator = None

        if adjust_points is not None:
            self.adjust_points = adjust_points
        if auto_points is not None:
            self.auto_points = auto_points
        if bay1 is not None:
            self.bay1 = bay1
        if bay2 is not None:
            self.bay2 = bay2
        if bay3 is not None:
            self.bay3 = bay3
        if bay4 is not None:
            self.bay4 = bay4
        if bay5 is not None:
            self.bay5 = bay5
        if bay6 is not None:
            self.bay6 = bay6
        if bay7 is not None:
            self.bay7 = bay7
        if bay8 is not None:
            self.bay8 = bay8
        if cargo_points is not None:
            self.cargo_points = cargo_points
        if complete_rocket_ranking_point is not None:
            self.complete_rocket_ranking_point = complete_rocket_ranking_point
        if completed_rocket_far is not None:
            self.completed_rocket_far = completed_rocket_far
        if completed_rocket_near is not None:
            self.completed_rocket_near = completed_rocket_near
        if endgame_robot1 is not None:
            self.endgame_robot1 = endgame_robot1
        if endgame_robot2 is not None:
            self.endgame_robot2 = endgame_robot2
        if endgame_robot3 is not None:
            self.endgame_robot3 = endgame_robot3
        if foul_count is not None:
            self.foul_count = foul_count
        if foul_points is not None:
            self.foul_points = foul_points
        if hab_climb_points is not None:
            self.hab_climb_points = hab_climb_points
        if hab_docking_ranking_point is not None:
            self.hab_docking_ranking_point = hab_docking_ranking_point
        if hab_line_robot1 is not None:
            self.hab_line_robot1 = hab_line_robot1
        if hab_line_robot2 is not None:
            self.hab_line_robot2 = hab_line_robot2
        if hab_line_robot3 is not None:
            self.hab_line_robot3 = hab_line_robot3
        if hatch_panel_points is not None:
            self.hatch_panel_points = hatch_panel_points
        if low_left_rocket_far is not None:
            self.low_left_rocket_far = low_left_rocket_far
        if low_left_rocket_near is not None:
            self.low_left_rocket_near = low_left_rocket_near
        if low_right_rocket_far is not None:
            self.low_right_rocket_far = low_right_rocket_far
        if low_right_rocket_near is not None:
            self.low_right_rocket_near = low_right_rocket_near
        if mid_left_rocket_far is not None:
            self.mid_left_rocket_far = mid_left_rocket_far
        if mid_left_rocket_near is not None:
            self.mid_left_rocket_near = mid_left_rocket_near
        if mid_right_rocket_far is not None:
            self.mid_right_rocket_far = mid_right_rocket_far
        if mid_right_rocket_near is not None:
            self.mid_right_rocket_near = mid_right_rocket_near
        if pre_match_bay1 is not None:
            self.pre_match_bay1 = pre_match_bay1
        if pre_match_bay2 is not None:
            self.pre_match_bay2 = pre_match_bay2
        if pre_match_bay3 is not None:
            self.pre_match_bay3 = pre_match_bay3
        if pre_match_bay6 is not None:
            self.pre_match_bay6 = pre_match_bay6
        if pre_match_bay7 is not None:
            self.pre_match_bay7 = pre_match_bay7
        if pre_match_bay8 is not None:
            self.pre_match_bay8 = pre_match_bay8
        if pre_match_level_robot1 is not None:
            self.pre_match_level_robot1 = pre_match_level_robot1
        if pre_match_level_robot2 is not None:
            self.pre_match_level_robot2 = pre_match_level_robot2
        if pre_match_level_robot3 is not None:
            self.pre_match_level_robot3 = pre_match_level_robot3
        if rp is not None:
            self.rp = rp
        if sand_storm_bonus_points is not None:
            self.sand_storm_bonus_points = sand_storm_bonus_points
        if tech_foul_count is not None:
            self.tech_foul_count = tech_foul_count
        if teleop_points is not None:
            self.teleop_points = teleop_points
        if top_left_rocket_far is not None:
            self.top_left_rocket_far = top_left_rocket_far
        if top_left_rocket_near is not None:
            self.top_left_rocket_near = top_left_rocket_near
        if top_right_rocket_far is not None:
            self.top_right_rocket_far = top_right_rocket_far
        if top_right_rocket_near is not None:
            self.top_right_rocket_near = top_right_rocket_near
        if total_points is not None:
            self.total_points = total_points

    @property
    def adjust_points(self):
        """Gets the adjust_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The adjust_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: int
        """
        return self._adjust_points

    @adjust_points.setter
    def adjust_points(self, adjust_points):
        """Sets the adjust_points of this MatchScoreBreakdown2019Alliance.


        :param adjust_points: The adjust_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: int
        """

        self._adjust_points = adjust_points

    @property
    def auto_points(self):
        """Gets the auto_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The auto_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: int
        """
        return self._auto_points

    @auto_points.setter
    def auto_points(self, auto_points):
        """Sets the auto_points of this MatchScoreBreakdown2019Alliance.


        :param auto_points: The auto_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: int
        """

        self._auto_points = auto_points

    @property
    def bay1(self):
        """Gets the bay1 of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The bay1 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._bay1

    @bay1.setter
    def bay1(self, bay1):
        """Sets the bay1 of this MatchScoreBreakdown2019Alliance.


        :param bay1: The bay1 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._bay1 = bay1

    @property
    def bay2(self):
        """Gets the bay2 of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The bay2 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._bay2

    @bay2.setter
    def bay2(self, bay2):
        """Sets the bay2 of this MatchScoreBreakdown2019Alliance.


        :param bay2: The bay2 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._bay2 = bay2

    @property
    def bay3(self):
        """Gets the bay3 of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The bay3 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._bay3

    @bay3.setter
    def bay3(self, bay3):
        """Sets the bay3 of this MatchScoreBreakdown2019Alliance.


        :param bay3: The bay3 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._bay3 = bay3

    @property
    def bay4(self):
        """Gets the bay4 of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The bay4 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._bay4

    @bay4.setter
    def bay4(self, bay4):
        """Sets the bay4 of this MatchScoreBreakdown2019Alliance.


        :param bay4: The bay4 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._bay4 = bay4

    @property
    def bay5(self):
        """Gets the bay5 of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The bay5 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._bay5

    @bay5.setter
    def bay5(self, bay5):
        """Sets the bay5 of this MatchScoreBreakdown2019Alliance.


        :param bay5: The bay5 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._bay5 = bay5

    @property
    def bay6(self):
        """Gets the bay6 of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The bay6 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._bay6

    @bay6.setter
    def bay6(self, bay6):
        """Sets the bay6 of this MatchScoreBreakdown2019Alliance.


        :param bay6: The bay6 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._bay6 = bay6

    @property
    def bay7(self):
        """Gets the bay7 of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The bay7 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._bay7

    @bay7.setter
    def bay7(self, bay7):
        """Sets the bay7 of this MatchScoreBreakdown2019Alliance.


        :param bay7: The bay7 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._bay7 = bay7

    @property
    def bay8(self):
        """Gets the bay8 of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The bay8 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._bay8

    @bay8.setter
    def bay8(self, bay8):
        """Sets the bay8 of this MatchScoreBreakdown2019Alliance.


        :param bay8: The bay8 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._bay8 = bay8

    @property
    def cargo_points(self):
        """Gets the cargo_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The cargo_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: int
        """
        return self._cargo_points

    @cargo_points.setter
    def cargo_points(self, cargo_points):
        """Sets the cargo_points of this MatchScoreBreakdown2019Alliance.


        :param cargo_points: The cargo_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: int
        """

        self._cargo_points = cargo_points

    @property
    def complete_rocket_ranking_point(self):
        """Gets the complete_rocket_ranking_point of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The complete_rocket_ranking_point of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: bool
        """
        return self._complete_rocket_ranking_point

    @complete_rocket_ranking_point.setter
    def complete_rocket_ranking_point(self, complete_rocket_ranking_point):
        """Sets the complete_rocket_ranking_point of this MatchScoreBreakdown2019Alliance.


        :param complete_rocket_ranking_point: The complete_rocket_ranking_point of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: bool
        """

        self._complete_rocket_ranking_point = complete_rocket_ranking_point

    @property
    def completed_rocket_far(self):
        """Gets the completed_rocket_far of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The completed_rocket_far of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: bool
        """
        return self._completed_rocket_far

    @completed_rocket_far.setter
    def completed_rocket_far(self, completed_rocket_far):
        """Sets the completed_rocket_far of this MatchScoreBreakdown2019Alliance.


        :param completed_rocket_far: The completed_rocket_far of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: bool
        """

        self._completed_rocket_far = completed_rocket_far

    @property
    def completed_rocket_near(self):
        """Gets the completed_rocket_near of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The completed_rocket_near of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: bool
        """
        return self._completed_rocket_near

    @completed_rocket_near.setter
    def completed_rocket_near(self, completed_rocket_near):
        """Sets the completed_rocket_near of this MatchScoreBreakdown2019Alliance.


        :param completed_rocket_near: The completed_rocket_near of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: bool
        """

        self._completed_rocket_near = completed_rocket_near

    @property
    def endgame_robot1(self):
        """Gets the endgame_robot1 of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The endgame_robot1 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._endgame_robot1

    @endgame_robot1.setter
    def endgame_robot1(self, endgame_robot1):
        """Sets the endgame_robot1 of this MatchScoreBreakdown2019Alliance.


        :param endgame_robot1: The endgame_robot1 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._endgame_robot1 = endgame_robot1

    @property
    def endgame_robot2(self):
        """Gets the endgame_robot2 of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The endgame_robot2 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._endgame_robot2

    @endgame_robot2.setter
    def endgame_robot2(self, endgame_robot2):
        """Sets the endgame_robot2 of this MatchScoreBreakdown2019Alliance.


        :param endgame_robot2: The endgame_robot2 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._endgame_robot2 = endgame_robot2

    @property
    def endgame_robot3(self):
        """Gets the endgame_robot3 of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The endgame_robot3 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._endgame_robot3

    @endgame_robot3.setter
    def endgame_robot3(self, endgame_robot3):
        """Sets the endgame_robot3 of this MatchScoreBreakdown2019Alliance.


        :param endgame_robot3: The endgame_robot3 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._endgame_robot3 = endgame_robot3

    @property
    def foul_count(self):
        """Gets the foul_count of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The foul_count of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: int
        """
        return self._foul_count

    @foul_count.setter
    def foul_count(self, foul_count):
        """Sets the foul_count of this MatchScoreBreakdown2019Alliance.


        :param foul_count: The foul_count of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: int
        """

        self._foul_count = foul_count

    @property
    def foul_points(self):
        """Gets the foul_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The foul_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: int
        """
        return self._foul_points

    @foul_points.setter
    def foul_points(self, foul_points):
        """Sets the foul_points of this MatchScoreBreakdown2019Alliance.


        :param foul_points: The foul_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: int
        """

        self._foul_points = foul_points

    @property
    def hab_climb_points(self):
        """Gets the hab_climb_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The hab_climb_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: int
        """
        return self._hab_climb_points

    @hab_climb_points.setter
    def hab_climb_points(self, hab_climb_points):
        """Sets the hab_climb_points of this MatchScoreBreakdown2019Alliance.


        :param hab_climb_points: The hab_climb_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: int
        """

        self._hab_climb_points = hab_climb_points

    @property
    def hab_docking_ranking_point(self):
        """Gets the hab_docking_ranking_point of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The hab_docking_ranking_point of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: bool
        """
        return self._hab_docking_ranking_point

    @hab_docking_ranking_point.setter
    def hab_docking_ranking_point(self, hab_docking_ranking_point):
        """Sets the hab_docking_ranking_point of this MatchScoreBreakdown2019Alliance.


        :param hab_docking_ranking_point: The hab_docking_ranking_point of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: bool
        """

        self._hab_docking_ranking_point = hab_docking_ranking_point

    @property
    def hab_line_robot1(self):
        """Gets the hab_line_robot1 of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The hab_line_robot1 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._hab_line_robot1

    @hab_line_robot1.setter
    def hab_line_robot1(self, hab_line_robot1):
        """Sets the hab_line_robot1 of this MatchScoreBreakdown2019Alliance.


        :param hab_line_robot1: The hab_line_robot1 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._hab_line_robot1 = hab_line_robot1

    @property
    def hab_line_robot2(self):
        """Gets the hab_line_robot2 of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The hab_line_robot2 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._hab_line_robot2

    @hab_line_robot2.setter
    def hab_line_robot2(self, hab_line_robot2):
        """Sets the hab_line_robot2 of this MatchScoreBreakdown2019Alliance.


        :param hab_line_robot2: The hab_line_robot2 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._hab_line_robot2 = hab_line_robot2

    @property
    def hab_line_robot3(self):
        """Gets the hab_line_robot3 of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The hab_line_robot3 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._hab_line_robot3

    @hab_line_robot3.setter
    def hab_line_robot3(self, hab_line_robot3):
        """Sets the hab_line_robot3 of this MatchScoreBreakdown2019Alliance.


        :param hab_line_robot3: The hab_line_robot3 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._hab_line_robot3 = hab_line_robot3

    @property
    def hatch_panel_points(self):
        """Gets the hatch_panel_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The hatch_panel_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: int
        """
        return self._hatch_panel_points

    @hatch_panel_points.setter
    def hatch_panel_points(self, hatch_panel_points):
        """Sets the hatch_panel_points of this MatchScoreBreakdown2019Alliance.


        :param hatch_panel_points: The hatch_panel_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: int
        """

        self._hatch_panel_points = hatch_panel_points

    @property
    def low_left_rocket_far(self):
        """Gets the low_left_rocket_far of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The low_left_rocket_far of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._low_left_rocket_far

    @low_left_rocket_far.setter
    def low_left_rocket_far(self, low_left_rocket_far):
        """Sets the low_left_rocket_far of this MatchScoreBreakdown2019Alliance.


        :param low_left_rocket_far: The low_left_rocket_far of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._low_left_rocket_far = low_left_rocket_far

    @property
    def low_left_rocket_near(self):
        """Gets the low_left_rocket_near of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The low_left_rocket_near of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._low_left_rocket_near

    @low_left_rocket_near.setter
    def low_left_rocket_near(self, low_left_rocket_near):
        """Sets the low_left_rocket_near of this MatchScoreBreakdown2019Alliance.


        :param low_left_rocket_near: The low_left_rocket_near of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._low_left_rocket_near = low_left_rocket_near

    @property
    def low_right_rocket_far(self):
        """Gets the low_right_rocket_far of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The low_right_rocket_far of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._low_right_rocket_far

    @low_right_rocket_far.setter
    def low_right_rocket_far(self, low_right_rocket_far):
        """Sets the low_right_rocket_far of this MatchScoreBreakdown2019Alliance.


        :param low_right_rocket_far: The low_right_rocket_far of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._low_right_rocket_far = low_right_rocket_far

    @property
    def low_right_rocket_near(self):
        """Gets the low_right_rocket_near of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The low_right_rocket_near of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._low_right_rocket_near

    @low_right_rocket_near.setter
    def low_right_rocket_near(self, low_right_rocket_near):
        """Sets the low_right_rocket_near of this MatchScoreBreakdown2019Alliance.


        :param low_right_rocket_near: The low_right_rocket_near of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._low_right_rocket_near = low_right_rocket_near

    @property
    def mid_left_rocket_far(self):
        """Gets the mid_left_rocket_far of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The mid_left_rocket_far of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._mid_left_rocket_far

    @mid_left_rocket_far.setter
    def mid_left_rocket_far(self, mid_left_rocket_far):
        """Sets the mid_left_rocket_far of this MatchScoreBreakdown2019Alliance.


        :param mid_left_rocket_far: The mid_left_rocket_far of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._mid_left_rocket_far = mid_left_rocket_far

    @property
    def mid_left_rocket_near(self):
        """Gets the mid_left_rocket_near of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The mid_left_rocket_near of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._mid_left_rocket_near

    @mid_left_rocket_near.setter
    def mid_left_rocket_near(self, mid_left_rocket_near):
        """Sets the mid_left_rocket_near of this MatchScoreBreakdown2019Alliance.


        :param mid_left_rocket_near: The mid_left_rocket_near of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._mid_left_rocket_near = mid_left_rocket_near

    @property
    def mid_right_rocket_far(self):
        """Gets the mid_right_rocket_far of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The mid_right_rocket_far of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._mid_right_rocket_far

    @mid_right_rocket_far.setter
    def mid_right_rocket_far(self, mid_right_rocket_far):
        """Sets the mid_right_rocket_far of this MatchScoreBreakdown2019Alliance.


        :param mid_right_rocket_far: The mid_right_rocket_far of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._mid_right_rocket_far = mid_right_rocket_far

    @property
    def mid_right_rocket_near(self):
        """Gets the mid_right_rocket_near of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The mid_right_rocket_near of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._mid_right_rocket_near

    @mid_right_rocket_near.setter
    def mid_right_rocket_near(self, mid_right_rocket_near):
        """Sets the mid_right_rocket_near of this MatchScoreBreakdown2019Alliance.


        :param mid_right_rocket_near: The mid_right_rocket_near of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._mid_right_rocket_near = mid_right_rocket_near

    @property
    def pre_match_bay1(self):
        """Gets the pre_match_bay1 of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The pre_match_bay1 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._pre_match_bay1

    @pre_match_bay1.setter
    def pre_match_bay1(self, pre_match_bay1):
        """Sets the pre_match_bay1 of this MatchScoreBreakdown2019Alliance.


        :param pre_match_bay1: The pre_match_bay1 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._pre_match_bay1 = pre_match_bay1

    @property
    def pre_match_bay2(self):
        """Gets the pre_match_bay2 of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The pre_match_bay2 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._pre_match_bay2

    @pre_match_bay2.setter
    def pre_match_bay2(self, pre_match_bay2):
        """Sets the pre_match_bay2 of this MatchScoreBreakdown2019Alliance.


        :param pre_match_bay2: The pre_match_bay2 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._pre_match_bay2 = pre_match_bay2

    @property
    def pre_match_bay3(self):
        """Gets the pre_match_bay3 of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The pre_match_bay3 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._pre_match_bay3

    @pre_match_bay3.setter
    def pre_match_bay3(self, pre_match_bay3):
        """Sets the pre_match_bay3 of this MatchScoreBreakdown2019Alliance.


        :param pre_match_bay3: The pre_match_bay3 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._pre_match_bay3 = pre_match_bay3

    @property
    def pre_match_bay6(self):
        """Gets the pre_match_bay6 of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The pre_match_bay6 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._pre_match_bay6

    @pre_match_bay6.setter
    def pre_match_bay6(self, pre_match_bay6):
        """Sets the pre_match_bay6 of this MatchScoreBreakdown2019Alliance.


        :param pre_match_bay6: The pre_match_bay6 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._pre_match_bay6 = pre_match_bay6

    @property
    def pre_match_bay7(self):
        """Gets the pre_match_bay7 of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The pre_match_bay7 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._pre_match_bay7

    @pre_match_bay7.setter
    def pre_match_bay7(self, pre_match_bay7):
        """Sets the pre_match_bay7 of this MatchScoreBreakdown2019Alliance.


        :param pre_match_bay7: The pre_match_bay7 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._pre_match_bay7 = pre_match_bay7

    @property
    def pre_match_bay8(self):
        """Gets the pre_match_bay8 of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The pre_match_bay8 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._pre_match_bay8

    @pre_match_bay8.setter
    def pre_match_bay8(self, pre_match_bay8):
        """Sets the pre_match_bay8 of this MatchScoreBreakdown2019Alliance.


        :param pre_match_bay8: The pre_match_bay8 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._pre_match_bay8 = pre_match_bay8

    @property
    def pre_match_level_robot1(self):
        """Gets the pre_match_level_robot1 of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The pre_match_level_robot1 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._pre_match_level_robot1

    @pre_match_level_robot1.setter
    def pre_match_level_robot1(self, pre_match_level_robot1):
        """Sets the pre_match_level_robot1 of this MatchScoreBreakdown2019Alliance.


        :param pre_match_level_robot1: The pre_match_level_robot1 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._pre_match_level_robot1 = pre_match_level_robot1

    @property
    def pre_match_level_robot2(self):
        """Gets the pre_match_level_robot2 of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The pre_match_level_robot2 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._pre_match_level_robot2

    @pre_match_level_robot2.setter
    def pre_match_level_robot2(self, pre_match_level_robot2):
        """Sets the pre_match_level_robot2 of this MatchScoreBreakdown2019Alliance.


        :param pre_match_level_robot2: The pre_match_level_robot2 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._pre_match_level_robot2 = pre_match_level_robot2

    @property
    def pre_match_level_robot3(self):
        """Gets the pre_match_level_robot3 of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The pre_match_level_robot3 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._pre_match_level_robot3

    @pre_match_level_robot3.setter
    def pre_match_level_robot3(self, pre_match_level_robot3):
        """Sets the pre_match_level_robot3 of this MatchScoreBreakdown2019Alliance.


        :param pre_match_level_robot3: The pre_match_level_robot3 of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._pre_match_level_robot3 = pre_match_level_robot3

    @property
    def rp(self):
        """Gets the rp of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The rp of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: int
        """
        return self._rp

    @rp.setter
    def rp(self, rp):
        """Sets the rp of this MatchScoreBreakdown2019Alliance.


        :param rp: The rp of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: int
        """

        self._rp = rp

    @property
    def sand_storm_bonus_points(self):
        """Gets the sand_storm_bonus_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The sand_storm_bonus_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: int
        """
        return self._sand_storm_bonus_points

    @sand_storm_bonus_points.setter
    def sand_storm_bonus_points(self, sand_storm_bonus_points):
        """Sets the sand_storm_bonus_points of this MatchScoreBreakdown2019Alliance.


        :param sand_storm_bonus_points: The sand_storm_bonus_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: int
        """

        self._sand_storm_bonus_points = sand_storm_bonus_points

    @property
    def tech_foul_count(self):
        """Gets the tech_foul_count of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The tech_foul_count of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: int
        """
        return self._tech_foul_count

    @tech_foul_count.setter
    def tech_foul_count(self, tech_foul_count):
        """Sets the tech_foul_count of this MatchScoreBreakdown2019Alliance.


        :param tech_foul_count: The tech_foul_count of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: int
        """

        self._tech_foul_count = tech_foul_count

    @property
    def teleop_points(self):
        """Gets the teleop_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The teleop_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: int
        """
        return self._teleop_points

    @teleop_points.setter
    def teleop_points(self, teleop_points):
        """Sets the teleop_points of this MatchScoreBreakdown2019Alliance.


        :param teleop_points: The teleop_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: int
        """

        self._teleop_points = teleop_points

    @property
    def top_left_rocket_far(self):
        """Gets the top_left_rocket_far of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The top_left_rocket_far of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._top_left_rocket_far

    @top_left_rocket_far.setter
    def top_left_rocket_far(self, top_left_rocket_far):
        """Sets the top_left_rocket_far of this MatchScoreBreakdown2019Alliance.


        :param top_left_rocket_far: The top_left_rocket_far of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._top_left_rocket_far = top_left_rocket_far

    @property
    def top_left_rocket_near(self):
        """Gets the top_left_rocket_near of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The top_left_rocket_near of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._top_left_rocket_near

    @top_left_rocket_near.setter
    def top_left_rocket_near(self, top_left_rocket_near):
        """Sets the top_left_rocket_near of this MatchScoreBreakdown2019Alliance.


        :param top_left_rocket_near: The top_left_rocket_near of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._top_left_rocket_near = top_left_rocket_near

    @property
    def top_right_rocket_far(self):
        """Gets the top_right_rocket_far of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The top_right_rocket_far of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._top_right_rocket_far

    @top_right_rocket_far.setter
    def top_right_rocket_far(self, top_right_rocket_far):
        """Sets the top_right_rocket_far of this MatchScoreBreakdown2019Alliance.


        :param top_right_rocket_far: The top_right_rocket_far of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._top_right_rocket_far = top_right_rocket_far

    @property
    def top_right_rocket_near(self):
        """Gets the top_right_rocket_near of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The top_right_rocket_near of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: str
        """
        return self._top_right_rocket_near

    @top_right_rocket_near.setter
    def top_right_rocket_near(self, top_right_rocket_near):
        """Sets the top_right_rocket_near of this MatchScoreBreakdown2019Alliance.


        :param top_right_rocket_near: The top_right_rocket_near of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: str
        """

        self._top_right_rocket_near = top_right_rocket_near

    @property
    def total_points(self):
        """Gets the total_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501


        :return: The total_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :rtype: int
        """
        return self._total_points

    @total_points.setter
    def total_points(self, total_points):
        """Sets the total_points of this MatchScoreBreakdown2019Alliance.


        :param total_points: The total_points of this MatchScoreBreakdown2019Alliance.  # noqa: E501
        :type: int
        """

        self._total_points = total_points

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MatchScoreBreakdown2019Alliance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MatchScoreBreakdown2019Alliance):
            return True

        return self.to_dict() != other.to_dict()
