# coding: utf-8

"""
    The Blue Alliance API v3

    # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.  # noqa: E501

    The version of the OpenAPI document: 3.8.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from tbaapiv3client.configuration import Configuration


class EliminationAlliance(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'backup': 'EliminationAllianceBackup',
        'declines': 'list[str]',
        'picks': 'list[str]',
        'status': 'EliminationAllianceStatus'
    }

    attribute_map = {
        'name': 'name',
        'backup': 'backup',
        'declines': 'declines',
        'picks': 'picks',
        'status': 'status'
    }

    def __init__(self, name=None, backup=None, declines=None, picks=None, status=None, local_vars_configuration=None):  # noqa: E501
        """EliminationAlliance - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._backup = None
        self._declines = None
        self._picks = None
        self._status = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if backup is not None:
            self.backup = backup
        if declines is not None:
            self.declines = declines
        self.picks = picks
        if status is not None:
            self.status = status

    @property
    def name(self):
        """Gets the name of this EliminationAlliance.  # noqa: E501

        Alliance name, may be null.  # noqa: E501

        :return: The name of this EliminationAlliance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EliminationAlliance.

        Alliance name, may be null.  # noqa: E501

        :param name: The name of this EliminationAlliance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def backup(self):
        """Gets the backup of this EliminationAlliance.  # noqa: E501


        :return: The backup of this EliminationAlliance.  # noqa: E501
        :rtype: EliminationAllianceBackup
        """
        return self._backup

    @backup.setter
    def backup(self, backup):
        """Sets the backup of this EliminationAlliance.


        :param backup: The backup of this EliminationAlliance.  # noqa: E501
        :type: EliminationAllianceBackup
        """

        self._backup = backup

    @property
    def declines(self):
        """Gets the declines of this EliminationAlliance.  # noqa: E501

        List of teams that declined the alliance.  # noqa: E501

        :return: The declines of this EliminationAlliance.  # noqa: E501
        :rtype: list[str]
        """
        return self._declines

    @declines.setter
    def declines(self, declines):
        """Sets the declines of this EliminationAlliance.

        List of teams that declined the alliance.  # noqa: E501

        :param declines: The declines of this EliminationAlliance.  # noqa: E501
        :type: list[str]
        """

        self._declines = declines

    @property
    def picks(self):
        """Gets the picks of this EliminationAlliance.  # noqa: E501

        List of team keys picked for the alliance. First pick is captain.  # noqa: E501

        :return: The picks of this EliminationAlliance.  # noqa: E501
        :rtype: list[str]
        """
        return self._picks

    @picks.setter
    def picks(self, picks):
        """Sets the picks of this EliminationAlliance.

        List of team keys picked for the alliance. First pick is captain.  # noqa: E501

        :param picks: The picks of this EliminationAlliance.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and picks is None:  # noqa: E501
            raise ValueError("Invalid value for `picks`, must not be `None`")  # noqa: E501

        self._picks = picks

    @property
    def status(self):
        """Gets the status of this EliminationAlliance.  # noqa: E501


        :return: The status of this EliminationAlliance.  # noqa: E501
        :rtype: EliminationAllianceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EliminationAlliance.


        :param status: The status of this EliminationAlliance.  # noqa: E501
        :type: EliminationAllianceStatus
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EliminationAlliance):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EliminationAlliance):
            return True

        return self.to_dict() != other.to_dict()
