# coding: utf-8

"""
    The Blue Alliance API v3

    # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.  # noqa: E501

    The version of the OpenAPI document: 3.8.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tbaapiv3client.api_client import ApiClient
from tbaapiv3client.exceptions import (
    ApiTypeError,
    ApiValueError
)


class TeamApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_district_rankings(self, district_key, **kwargs):  # noqa: E501
        """get_district_rankings  # noqa: E501

        Gets a list of team district rankings for the given district.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_district_rankings(district_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str district_key: TBA District Key, eg `2016fim` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DistrictRanking]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_district_rankings_with_http_info(district_key, **kwargs)  # noqa: E501

    def get_district_rankings_with_http_info(self, district_key, **kwargs):  # noqa: E501
        """get_district_rankings  # noqa: E501

        Gets a list of team district rankings for the given district.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_district_rankings_with_http_info(district_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str district_key: TBA District Key, eg `2016fim` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DistrictRanking], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['district_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_district_rankings" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'district_key' is set
        if self.api_client.client_side_validation and ('district_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['district_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `district_key` when calling `get_district_rankings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'district_key' in local_var_params:
            path_params['district_key'] = local_var_params['district_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/district/{district_key}/rankings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DistrictRanking]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_district_teams(self, district_key, **kwargs):  # noqa: E501
        """get_district_teams  # noqa: E501

        Gets a list of `Team` objects that competed in events in the given district.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_district_teams(district_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str district_key: TBA District Key, eg `2016fim` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Team]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_district_teams_with_http_info(district_key, **kwargs)  # noqa: E501

    def get_district_teams_with_http_info(self, district_key, **kwargs):  # noqa: E501
        """get_district_teams  # noqa: E501

        Gets a list of `Team` objects that competed in events in the given district.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_district_teams_with_http_info(district_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str district_key: TBA District Key, eg `2016fim` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Team], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['district_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_district_teams" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'district_key' is set
        if self.api_client.client_side_validation and ('district_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['district_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `district_key` when calling `get_district_teams`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'district_key' in local_var_params:
            path_params['district_key'] = local_var_params['district_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/district/{district_key}/teams', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Team]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_district_teams_keys(self, district_key, **kwargs):  # noqa: E501
        """get_district_teams_keys  # noqa: E501

        Gets a list of `Team` objects that competed in events in the given district.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_district_teams_keys(district_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str district_key: TBA District Key, eg `2016fim` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_district_teams_keys_with_http_info(district_key, **kwargs)  # noqa: E501

    def get_district_teams_keys_with_http_info(self, district_key, **kwargs):  # noqa: E501
        """get_district_teams_keys  # noqa: E501

        Gets a list of `Team` objects that competed in events in the given district.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_district_teams_keys_with_http_info(district_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str district_key: TBA District Key, eg `2016fim` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[str], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['district_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_district_teams_keys" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'district_key' is set
        if self.api_client.client_side_validation and ('district_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['district_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `district_key` when calling `get_district_teams_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'district_key' in local_var_params:
            path_params['district_key'] = local_var_params['district_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/district/{district_key}/teams/keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_district_teams_simple(self, district_key, **kwargs):  # noqa: E501
        """get_district_teams_simple  # noqa: E501

        Gets a short-form list of `Team` objects that competed in events in the given district.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_district_teams_simple(district_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str district_key: TBA District Key, eg `2016fim` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[TeamSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_district_teams_simple_with_http_info(district_key, **kwargs)  # noqa: E501

    def get_district_teams_simple_with_http_info(self, district_key, **kwargs):  # noqa: E501
        """get_district_teams_simple  # noqa: E501

        Gets a short-form list of `Team` objects that competed in events in the given district.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_district_teams_simple_with_http_info(district_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str district_key: TBA District Key, eg `2016fim` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[TeamSimple], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['district_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_district_teams_simple" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'district_key' is set
        if self.api_client.client_side_validation and ('district_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['district_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `district_key` when calling `get_district_teams_simple`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'district_key' in local_var_params:
            path_params['district_key'] = local_var_params['district_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/district/{district_key}/teams/simple', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TeamSimple]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_event_teams(self, event_key, **kwargs):  # noqa: E501
        """get_event_teams  # noqa: E501

        Gets a list of `Team` objects that competed in the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_teams(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Team]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_event_teams_with_http_info(event_key, **kwargs)  # noqa: E501

    def get_event_teams_with_http_info(self, event_key, **kwargs):  # noqa: E501
        """get_event_teams  # noqa: E501

        Gets a list of `Team` objects that competed in the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_teams_with_http_info(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Team], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['event_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_teams" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_event_teams`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/event/{event_key}/teams', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Team]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_event_teams_keys(self, event_key, **kwargs):  # noqa: E501
        """get_event_teams_keys  # noqa: E501

        Gets a list of `Team` keys that competed in the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_teams_keys(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_event_teams_keys_with_http_info(event_key, **kwargs)  # noqa: E501

    def get_event_teams_keys_with_http_info(self, event_key, **kwargs):  # noqa: E501
        """get_event_teams_keys  # noqa: E501

        Gets a list of `Team` keys that competed in the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_teams_keys_with_http_info(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[str], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['event_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_teams_keys" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_event_teams_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/event/{event_key}/teams/keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_event_teams_simple(self, event_key, **kwargs):  # noqa: E501
        """get_event_teams_simple  # noqa: E501

        Gets a short-form list of `Team` objects that competed in the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_teams_simple(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[TeamSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_event_teams_simple_with_http_info(event_key, **kwargs)  # noqa: E501

    def get_event_teams_simple_with_http_info(self, event_key, **kwargs):  # noqa: E501
        """get_event_teams_simple  # noqa: E501

        Gets a short-form list of `Team` objects that competed in the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_teams_simple_with_http_info(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[TeamSimple], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['event_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_teams_simple" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_event_teams_simple`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/event/{event_key}/teams/simple', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TeamSimple]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_event_teams_statuses(self, event_key, **kwargs):  # noqa: E501
        """get_event_teams_statuses  # noqa: E501

        Gets a key-value list of the event statuses for teams competing at the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_teams_statuses(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: dict(str, TeamEventStatus)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_event_teams_statuses_with_http_info(event_key, **kwargs)  # noqa: E501

    def get_event_teams_statuses_with_http_info(self, event_key, **kwargs):  # noqa: E501
        """get_event_teams_statuses  # noqa: E501

        Gets a key-value list of the event statuses for teams competing at the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_teams_statuses_with_http_info(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(dict(str, TeamEventStatus), status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['event_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_teams_statuses" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_event_teams_statuses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/event/{event_key}/teams/statuses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, TeamEventStatus)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team(self, team_key, **kwargs):  # noqa: E501
        """get_team  # noqa: E501

        Gets a `Team` object for the team referenced by the given key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team(team_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Team
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_with_http_info(team_key, **kwargs)  # noqa: E501

    def get_team_with_http_info(self, team_key, **kwargs):  # noqa: E501
        """get_team  # noqa: E501

        Gets a `Team` object for the team referenced by the given key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_with_http_info(team_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Team, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Team',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_awards(self, team_key, **kwargs):  # noqa: E501
        """get_team_awards  # noqa: E501

        Gets a list of awards the given team has won.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_awards(team_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Award]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_awards_with_http_info(team_key, **kwargs)  # noqa: E501

    def get_team_awards_with_http_info(self, team_key, **kwargs):  # noqa: E501
        """get_team_awards  # noqa: E501

        Gets a list of awards the given team has won.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_awards_with_http_info(team_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Award], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_awards" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_awards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/awards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Award]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_awards_by_year(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_awards_by_year  # noqa: E501

        Gets a list of awards the given team has won in a given year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_awards_by_year(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Award]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_awards_by_year_with_http_info(team_key, year, **kwargs)  # noqa: E501

    def get_team_awards_by_year_with_http_info(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_awards_by_year  # noqa: E501

        Gets a list of awards the given team has won in a given year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_awards_by_year_with_http_info(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Award], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_key', 'year', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_awards_by_year" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_awards_by_year`")  # noqa: E501
        # verify the required parameter 'year' is set
        if self.api_client.client_side_validation and ('year' not in local_var_params or  # noqa: E501
                                                        local_var_params['year'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `year` when calling `get_team_awards_by_year`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501
        if 'year' in local_var_params:
            path_params['year'] = local_var_params['year']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/awards/{year}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Award]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_districts(self, team_key, **kwargs):  # noqa: E501
        """get_team_districts  # noqa: E501

        Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_districts(team_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[DistrictList]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_districts_with_http_info(team_key, **kwargs)  # noqa: E501

    def get_team_districts_with_http_info(self, team_key, **kwargs):  # noqa: E501
        """get_team_districts  # noqa: E501

        Gets an array of districts representing each year the team was in a district. Will return an empty array if the team was never in a district.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_districts_with_http_info(team_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[DistrictList], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_districts" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_districts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/districts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DistrictList]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_event_awards(self, team_key, event_key, **kwargs):  # noqa: E501
        """get_team_event_awards  # noqa: E501

        Gets a list of awards the given team won at the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_event_awards(team_key, event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Award]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_event_awards_with_http_info(team_key, event_key, **kwargs)  # noqa: E501

    def get_team_event_awards_with_http_info(self, team_key, event_key, **kwargs):  # noqa: E501
        """get_team_event_awards  # noqa: E501

        Gets a list of awards the given team won at the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_event_awards_with_http_info(team_key, event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Award], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_key', 'event_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_event_awards" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_event_awards`")  # noqa: E501
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_team_event_awards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/event/{event_key}/awards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Award]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_event_matches(self, team_key, event_key, **kwargs):  # noqa: E501
        """get_team_event_matches  # noqa: E501

        Gets a list of matches for the given team and event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_event_matches(team_key, event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_event_matches_with_http_info(team_key, event_key, **kwargs)  # noqa: E501

    def get_team_event_matches_with_http_info(self, team_key, event_key, **kwargs):  # noqa: E501
        """get_team_event_matches  # noqa: E501

        Gets a list of matches for the given team and event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_event_matches_with_http_info(team_key, event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Match], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_key', 'event_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_event_matches" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_event_matches`")  # noqa: E501
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_team_event_matches`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/event/{event_key}/matches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Match]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_event_matches_keys(self, team_key, event_key, **kwargs):  # noqa: E501
        """get_team_event_matches_keys  # noqa: E501

        Gets a list of match keys for matches for the given team and event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_event_matches_keys(team_key, event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_event_matches_keys_with_http_info(team_key, event_key, **kwargs)  # noqa: E501

    def get_team_event_matches_keys_with_http_info(self, team_key, event_key, **kwargs):  # noqa: E501
        """get_team_event_matches_keys  # noqa: E501

        Gets a list of match keys for matches for the given team and event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_event_matches_keys_with_http_info(team_key, event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[str], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_key', 'event_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_event_matches_keys" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_event_matches_keys`")  # noqa: E501
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_team_event_matches_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/event/{event_key}/matches/keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_event_matches_simple(self, team_key, event_key, **kwargs):  # noqa: E501
        """get_team_event_matches_simple  # noqa: E501

        Gets a short-form list of matches for the given team and event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_event_matches_simple(team_key, event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_event_matches_simple_with_http_info(team_key, event_key, **kwargs)  # noqa: E501

    def get_team_event_matches_simple_with_http_info(self, team_key, event_key, **kwargs):  # noqa: E501
        """get_team_event_matches_simple  # noqa: E501

        Gets a short-form list of matches for the given team and event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_event_matches_simple_with_http_info(team_key, event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Match], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_key', 'event_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_event_matches_simple" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_event_matches_simple`")  # noqa: E501
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_team_event_matches_simple`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/event/{event_key}/matches/simple', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Match]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_event_status(self, team_key, event_key, **kwargs):  # noqa: E501
        """get_team_event_status  # noqa: E501

        Gets the competition rank and status of the team at the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_event_status(team_key, event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TeamEventStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_event_status_with_http_info(team_key, event_key, **kwargs)  # noqa: E501

    def get_team_event_status_with_http_info(self, team_key, event_key, **kwargs):  # noqa: E501
        """get_team_event_status  # noqa: E501

        Gets the competition rank and status of the team at the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_event_status_with_http_info(team_key, event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TeamEventStatus, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_key', 'event_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_event_status" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_event_status`")  # noqa: E501
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_team_event_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/event/{event_key}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeamEventStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_events(self, team_key, **kwargs):  # noqa: E501
        """get_team_events  # noqa: E501

        Gets a list of all events this team has competed at.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events(team_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Event]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_events_with_http_info(team_key, **kwargs)  # noqa: E501

    def get_team_events_with_http_info(self, team_key, **kwargs):  # noqa: E501
        """get_team_events  # noqa: E501

        Gets a list of all events this team has competed at.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events_with_http_info(team_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Event], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_events" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Event]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_events_by_year(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_events_by_year  # noqa: E501

        Gets a list of events this team has competed at in the given year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events_by_year(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Event]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_events_by_year_with_http_info(team_key, year, **kwargs)  # noqa: E501

    def get_team_events_by_year_with_http_info(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_events_by_year  # noqa: E501

        Gets a list of events this team has competed at in the given year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events_by_year_with_http_info(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Event], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_key', 'year', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_events_by_year" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_events_by_year`")  # noqa: E501
        # verify the required parameter 'year' is set
        if self.api_client.client_side_validation and ('year' not in local_var_params or  # noqa: E501
                                                        local_var_params['year'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `year` when calling `get_team_events_by_year`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501
        if 'year' in local_var_params:
            path_params['year'] = local_var_params['year']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/events/{year}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Event]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_events_by_year_keys(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_events_by_year_keys  # noqa: E501

        Gets a list of the event keys for events this team has competed at in the given year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events_by_year_keys(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_events_by_year_keys_with_http_info(team_key, year, **kwargs)  # noqa: E501

    def get_team_events_by_year_keys_with_http_info(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_events_by_year_keys  # noqa: E501

        Gets a list of the event keys for events this team has competed at in the given year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events_by_year_keys_with_http_info(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[str], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_key', 'year', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_events_by_year_keys" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_events_by_year_keys`")  # noqa: E501
        # verify the required parameter 'year' is set
        if self.api_client.client_side_validation and ('year' not in local_var_params or  # noqa: E501
                                                        local_var_params['year'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `year` when calling `get_team_events_by_year_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501
        if 'year' in local_var_params:
            path_params['year'] = local_var_params['year']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/events/{year}/keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_events_by_year_simple(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_events_by_year_simple  # noqa: E501

        Gets a short-form list of events this team has competed at in the given year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events_by_year_simple(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[EventSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_events_by_year_simple_with_http_info(team_key, year, **kwargs)  # noqa: E501

    def get_team_events_by_year_simple_with_http_info(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_events_by_year_simple  # noqa: E501

        Gets a short-form list of events this team has competed at in the given year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events_by_year_simple_with_http_info(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[EventSimple], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_key', 'year', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_events_by_year_simple" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_events_by_year_simple`")  # noqa: E501
        # verify the required parameter 'year' is set
        if self.api_client.client_side_validation and ('year' not in local_var_params or  # noqa: E501
                                                        local_var_params['year'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `year` when calling `get_team_events_by_year_simple`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501
        if 'year' in local_var_params:
            path_params['year'] = local_var_params['year']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/events/{year}/simple', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EventSimple]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_events_keys(self, team_key, **kwargs):  # noqa: E501
        """get_team_events_keys  # noqa: E501

        Gets a list of the event keys for all events this team has competed at.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events_keys(team_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_events_keys_with_http_info(team_key, **kwargs)  # noqa: E501

    def get_team_events_keys_with_http_info(self, team_key, **kwargs):  # noqa: E501
        """get_team_events_keys  # noqa: E501

        Gets a list of the event keys for all events this team has competed at.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events_keys_with_http_info(team_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[str], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_events_keys" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_events_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/events/keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_events_simple(self, team_key, **kwargs):  # noqa: E501
        """get_team_events_simple  # noqa: E501

        Gets a short-form list of all events this team has competed at.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events_simple(team_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[EventSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_events_simple_with_http_info(team_key, **kwargs)  # noqa: E501

    def get_team_events_simple_with_http_info(self, team_key, **kwargs):  # noqa: E501
        """get_team_events_simple  # noqa: E501

        Gets a short-form list of all events this team has competed at.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events_simple_with_http_info(team_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[EventSimple], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_events_simple" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_events_simple`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/events/simple', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EventSimple]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_events_statuses_by_year(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_events_statuses_by_year  # noqa: E501

        Gets a key-value list of the event statuses for events this team has competed at in the given year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events_statuses_by_year(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: dict(str, TeamEventStatus)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_events_statuses_by_year_with_http_info(team_key, year, **kwargs)  # noqa: E501

    def get_team_events_statuses_by_year_with_http_info(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_events_statuses_by_year  # noqa: E501

        Gets a key-value list of the event statuses for events this team has competed at in the given year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events_statuses_by_year_with_http_info(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(dict(str, TeamEventStatus), status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_key', 'year', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_events_statuses_by_year" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_events_statuses_by_year`")  # noqa: E501
        # verify the required parameter 'year' is set
        if self.api_client.client_side_validation and ('year' not in local_var_params or  # noqa: E501
                                                        local_var_params['year'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `year` when calling `get_team_events_statuses_by_year`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501
        if 'year' in local_var_params:
            path_params['year'] = local_var_params['year']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/events/{year}/statuses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, TeamEventStatus)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_matches_by_year(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_matches_by_year  # noqa: E501

        Gets a list of matches for the given team and year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_matches_by_year(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_matches_by_year_with_http_info(team_key, year, **kwargs)  # noqa: E501

    def get_team_matches_by_year_with_http_info(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_matches_by_year  # noqa: E501

        Gets a list of matches for the given team and year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_matches_by_year_with_http_info(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Match], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_key', 'year', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_matches_by_year" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_matches_by_year`")  # noqa: E501
        # verify the required parameter 'year' is set
        if self.api_client.client_side_validation and ('year' not in local_var_params or  # noqa: E501
                                                        local_var_params['year'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `year` when calling `get_team_matches_by_year`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501
        if 'year' in local_var_params:
            path_params['year'] = local_var_params['year']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/matches/{year}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Match]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_matches_by_year_keys(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_matches_by_year_keys  # noqa: E501

        Gets a list of match keys for matches for the given team and year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_matches_by_year_keys(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_matches_by_year_keys_with_http_info(team_key, year, **kwargs)  # noqa: E501

    def get_team_matches_by_year_keys_with_http_info(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_matches_by_year_keys  # noqa: E501

        Gets a list of match keys for matches for the given team and year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_matches_by_year_keys_with_http_info(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[str], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_key', 'year', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_matches_by_year_keys" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_matches_by_year_keys`")  # noqa: E501
        # verify the required parameter 'year' is set
        if self.api_client.client_side_validation and ('year' not in local_var_params or  # noqa: E501
                                                        local_var_params['year'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `year` when calling `get_team_matches_by_year_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501
        if 'year' in local_var_params:
            path_params['year'] = local_var_params['year']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/matches/{year}/keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_matches_by_year_simple(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_matches_by_year_simple  # noqa: E501

        Gets a short-form list of matches for the given team and year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_matches_by_year_simple(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[MatchSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_matches_by_year_simple_with_http_info(team_key, year, **kwargs)  # noqa: E501

    def get_team_matches_by_year_simple_with_http_info(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_matches_by_year_simple  # noqa: E501

        Gets a short-form list of matches for the given team and year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_matches_by_year_simple_with_http_info(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[MatchSimple], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_key', 'year', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_matches_by_year_simple" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_matches_by_year_simple`")  # noqa: E501
        # verify the required parameter 'year' is set
        if self.api_client.client_side_validation and ('year' not in local_var_params or  # noqa: E501
                                                        local_var_params['year'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `year` when calling `get_team_matches_by_year_simple`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501
        if 'year' in local_var_params:
            path_params['year'] = local_var_params['year']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/matches/{year}/simple', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MatchSimple]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_media_by_tag(self, team_key, media_tag, **kwargs):  # noqa: E501
        """get_team_media_by_tag  # noqa: E501

        Gets a list of Media (videos / pictures) for the given team and tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_media_by_tag(team_key, media_tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str media_tag: Media Tag which describes the Media. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Media]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_media_by_tag_with_http_info(team_key, media_tag, **kwargs)  # noqa: E501

    def get_team_media_by_tag_with_http_info(self, team_key, media_tag, **kwargs):  # noqa: E501
        """get_team_media_by_tag  # noqa: E501

        Gets a list of Media (videos / pictures) for the given team and tag.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_media_by_tag_with_http_info(team_key, media_tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str media_tag: Media Tag which describes the Media. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Media], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_key', 'media_tag', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_media_by_tag" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_media_by_tag`")  # noqa: E501
        # verify the required parameter 'media_tag' is set
        if self.api_client.client_side_validation and ('media_tag' not in local_var_params or  # noqa: E501
                                                        local_var_params['media_tag'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `media_tag` when calling `get_team_media_by_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501
        if 'media_tag' in local_var_params:
            path_params['media_tag'] = local_var_params['media_tag']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/media/tag/{media_tag}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Media]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_media_by_tag_year(self, team_key, media_tag, year, **kwargs):  # noqa: E501
        """get_team_media_by_tag_year  # noqa: E501

        Gets a list of Media (videos / pictures) for the given team, tag and year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_media_by_tag_year(team_key, media_tag, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str media_tag: Media Tag which describes the Media. (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Media]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_media_by_tag_year_with_http_info(team_key, media_tag, year, **kwargs)  # noqa: E501

    def get_team_media_by_tag_year_with_http_info(self, team_key, media_tag, year, **kwargs):  # noqa: E501
        """get_team_media_by_tag_year  # noqa: E501

        Gets a list of Media (videos / pictures) for the given team, tag and year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_media_by_tag_year_with_http_info(team_key, media_tag, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str media_tag: Media Tag which describes the Media. (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Media], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_key', 'media_tag', 'year', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_media_by_tag_year" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_media_by_tag_year`")  # noqa: E501
        # verify the required parameter 'media_tag' is set
        if self.api_client.client_side_validation and ('media_tag' not in local_var_params or  # noqa: E501
                                                        local_var_params['media_tag'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `media_tag` when calling `get_team_media_by_tag_year`")  # noqa: E501
        # verify the required parameter 'year' is set
        if self.api_client.client_side_validation and ('year' not in local_var_params or  # noqa: E501
                                                        local_var_params['year'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `year` when calling `get_team_media_by_tag_year`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501
        if 'media_tag' in local_var_params:
            path_params['media_tag'] = local_var_params['media_tag']  # noqa: E501
        if 'year' in local_var_params:
            path_params['year'] = local_var_params['year']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/media/tag/{media_tag}/{year}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Media]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_media_by_year(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_media_by_year  # noqa: E501

        Gets a list of Media (videos / pictures) for the given team and year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_media_by_year(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Media]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_media_by_year_with_http_info(team_key, year, **kwargs)  # noqa: E501

    def get_team_media_by_year_with_http_info(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_media_by_year  # noqa: E501

        Gets a list of Media (videos / pictures) for the given team and year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_media_by_year_with_http_info(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Media], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_key', 'year', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_media_by_year" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_media_by_year`")  # noqa: E501
        # verify the required parameter 'year' is set
        if self.api_client.client_side_validation and ('year' not in local_var_params or  # noqa: E501
                                                        local_var_params['year'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `year` when calling `get_team_media_by_year`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501
        if 'year' in local_var_params:
            path_params['year'] = local_var_params['year']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/media/{year}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Media]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_robots(self, team_key, **kwargs):  # noqa: E501
        """get_team_robots  # noqa: E501

        Gets a list of year and robot name pairs for each year that a robot name was provided. Will return an empty array if the team has never named a robot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_robots(team_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[TeamRobot]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_robots_with_http_info(team_key, **kwargs)  # noqa: E501

    def get_team_robots_with_http_info(self, team_key, **kwargs):  # noqa: E501
        """get_team_robots  # noqa: E501

        Gets a list of year and robot name pairs for each year that a robot name was provided. Will return an empty array if the team has never named a robot.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_robots_with_http_info(team_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[TeamRobot], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_robots" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_robots`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/robots', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TeamRobot]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_simple(self, team_key, **kwargs):  # noqa: E501
        """get_team_simple  # noqa: E501

        Gets a `Team_Simple` object for the team referenced by the given key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_simple(team_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TeamSimple
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_simple_with_http_info(team_key, **kwargs)  # noqa: E501

    def get_team_simple_with_http_info(self, team_key, **kwargs):  # noqa: E501
        """get_team_simple  # noqa: E501

        Gets a `Team_Simple` object for the team referenced by the given key.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_simple_with_http_info(team_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TeamSimple, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_simple" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_simple`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/simple', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeamSimple',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_social_media(self, team_key, **kwargs):  # noqa: E501
        """get_team_social_media  # noqa: E501

        Gets a list of Media (social media) for the given team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_social_media(team_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Media]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_social_media_with_http_info(team_key, **kwargs)  # noqa: E501

    def get_team_social_media_with_http_info(self, team_key, **kwargs):  # noqa: E501
        """get_team_social_media  # noqa: E501

        Gets a list of Media (social media) for the given team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_social_media_with_http_info(team_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Media], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_social_media" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_social_media`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/social_media', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Media]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_years_participated(self, team_key, **kwargs):  # noqa: E501
        """get_team_years_participated  # noqa: E501

        Gets a list of years in which the team participated in at least one competition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_years_participated(team_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[int]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_years_participated_with_http_info(team_key, **kwargs)  # noqa: E501

    def get_team_years_participated_with_http_info(self, team_key, **kwargs):  # noqa: E501
        """get_team_years_participated  # noqa: E501

        Gets a list of years in which the team participated in at least one competition.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_years_participated_with_http_info(team_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[int], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['team_key', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_years_participated" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_years_participated`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/years_participated', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[int]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_teams(self, page_num, **kwargs):  # noqa: E501
        """get_teams  # noqa: E501

        Gets a list of `Team` objects, paginated in groups of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_teams(page_num, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page_num: Page number of results to return, zero-indexed (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Team]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_teams_with_http_info(page_num, **kwargs)  # noqa: E501

    def get_teams_with_http_info(self, page_num, **kwargs):  # noqa: E501
        """get_teams  # noqa: E501

        Gets a list of `Team` objects, paginated in groups of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_teams_with_http_info(page_num, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page_num: Page number of results to return, zero-indexed (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Team], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page_num', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_teams" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page_num' is set
        if self.api_client.client_side_validation and ('page_num' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_num'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_num` when calling `get_teams`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_num' in local_var_params:
            path_params['page_num'] = local_var_params['page_num']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/teams/{page_num}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Team]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_teams_by_year(self, year, page_num, **kwargs):  # noqa: E501
        """get_teams_by_year  # noqa: E501

        Gets a list of `Team` objects that competed in the given year, paginated in groups of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_teams_by_year(year, page_num, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param int page_num: Page number of results to return, zero-indexed (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Team]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_teams_by_year_with_http_info(year, page_num, **kwargs)  # noqa: E501

    def get_teams_by_year_with_http_info(self, year, page_num, **kwargs):  # noqa: E501
        """get_teams_by_year  # noqa: E501

        Gets a list of `Team` objects that competed in the given year, paginated in groups of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_teams_by_year_with_http_info(year, page_num, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param int page_num: Page number of results to return, zero-indexed (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Team], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['year', 'page_num', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_teams_by_year" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'year' is set
        if self.api_client.client_side_validation and ('year' not in local_var_params or  # noqa: E501
                                                        local_var_params['year'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `year` when calling `get_teams_by_year`")  # noqa: E501
        # verify the required parameter 'page_num' is set
        if self.api_client.client_side_validation and ('page_num' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_num'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_num` when calling `get_teams_by_year`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'year' in local_var_params:
            path_params['year'] = local_var_params['year']  # noqa: E501
        if 'page_num' in local_var_params:
            path_params['page_num'] = local_var_params['page_num']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/teams/{year}/{page_num}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Team]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_teams_by_year_keys(self, year, page_num, **kwargs):  # noqa: E501
        """get_teams_by_year_keys  # noqa: E501

        Gets a list Team Keys that competed in the given year, paginated in groups of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_teams_by_year_keys(year, page_num, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param int page_num: Page number of results to return, zero-indexed (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_teams_by_year_keys_with_http_info(year, page_num, **kwargs)  # noqa: E501

    def get_teams_by_year_keys_with_http_info(self, year, page_num, **kwargs):  # noqa: E501
        """get_teams_by_year_keys  # noqa: E501

        Gets a list Team Keys that competed in the given year, paginated in groups of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_teams_by_year_keys_with_http_info(year, page_num, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param int page_num: Page number of results to return, zero-indexed (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[str], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['year', 'page_num', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_teams_by_year_keys" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'year' is set
        if self.api_client.client_side_validation and ('year' not in local_var_params or  # noqa: E501
                                                        local_var_params['year'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `year` when calling `get_teams_by_year_keys`")  # noqa: E501
        # verify the required parameter 'page_num' is set
        if self.api_client.client_side_validation and ('page_num' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_num'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_num` when calling `get_teams_by_year_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'year' in local_var_params:
            path_params['year'] = local_var_params['year']  # noqa: E501
        if 'page_num' in local_var_params:
            path_params['page_num'] = local_var_params['page_num']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/teams/{year}/{page_num}/keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_teams_by_year_simple(self, year, page_num, **kwargs):  # noqa: E501
        """get_teams_by_year_simple  # noqa: E501

        Gets a list of short form `Team_Simple` objects that competed in the given year, paginated in groups of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_teams_by_year_simple(year, page_num, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param int page_num: Page number of results to return, zero-indexed (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[TeamSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_teams_by_year_simple_with_http_info(year, page_num, **kwargs)  # noqa: E501

    def get_teams_by_year_simple_with_http_info(self, year, page_num, **kwargs):  # noqa: E501
        """get_teams_by_year_simple  # noqa: E501

        Gets a list of short form `Team_Simple` objects that competed in the given year, paginated in groups of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_teams_by_year_simple_with_http_info(year, page_num, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param int page_num: Page number of results to return, zero-indexed (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[TeamSimple], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['year', 'page_num', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_teams_by_year_simple" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'year' is set
        if self.api_client.client_side_validation and ('year' not in local_var_params or  # noqa: E501
                                                        local_var_params['year'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `year` when calling `get_teams_by_year_simple`")  # noqa: E501
        # verify the required parameter 'page_num' is set
        if self.api_client.client_side_validation and ('page_num' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_num'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_num` when calling `get_teams_by_year_simple`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'year' in local_var_params:
            path_params['year'] = local_var_params['year']  # noqa: E501
        if 'page_num' in local_var_params:
            path_params['page_num'] = local_var_params['page_num']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/teams/{year}/{page_num}/simple', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TeamSimple]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_teams_keys(self, page_num, **kwargs):  # noqa: E501
        """get_teams_keys  # noqa: E501

        Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_teams_keys(page_num, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page_num: Page number of results to return, zero-indexed (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_teams_keys_with_http_info(page_num, **kwargs)  # noqa: E501

    def get_teams_keys_with_http_info(self, page_num, **kwargs):  # noqa: E501
        """get_teams_keys  # noqa: E501

        Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_teams_keys_with_http_info(page_num, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page_num: Page number of results to return, zero-indexed (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[str], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page_num', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_teams_keys" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page_num' is set
        if self.api_client.client_side_validation and ('page_num' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_num'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_num` when calling `get_teams_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_num' in local_var_params:
            path_params['page_num'] = local_var_params['page_num']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/teams/{page_num}/keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_teams_simple(self, page_num, **kwargs):  # noqa: E501
        """get_teams_simple  # noqa: E501

        Gets a list of short form `Team_Simple` objects, paginated in groups of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_teams_simple(page_num, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page_num: Page number of results to return, zero-indexed (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[TeamSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_teams_simple_with_http_info(page_num, **kwargs)  # noqa: E501

    def get_teams_simple_with_http_info(self, page_num, **kwargs):  # noqa: E501
        """get_teams_simple  # noqa: E501

        Gets a list of short form `Team_Simple` objects, paginated in groups of 500.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_teams_simple_with_http_info(page_num, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int page_num: Page number of results to return, zero-indexed (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[TeamSimple], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['page_num', 'if_modified_since']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_teams_simple" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'page_num' is set
        if self.api_client.client_side_validation and ('page_num' not in local_var_params or  # noqa: E501
                                                        local_var_params['page_num'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `page_num` when calling `get_teams_simple`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'page_num' in local_var_params:
            path_params['page_num'] = local_var_params['page_num']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/teams/{page_num}/simple', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TeamSimple]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
