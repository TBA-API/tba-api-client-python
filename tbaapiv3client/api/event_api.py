# coding: utf-8

"""
    The Blue Alliance API v3

    # Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.  # noqa: E501

    The version of the OpenAPI document: 3.8.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from tbaapiv3client.api_client import ApiClient
from tbaapiv3client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class EventApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_district_events(self, district_key, **kwargs):  # noqa: E501
        """get_district_events  # noqa: E501

        Gets a list of events in the given district.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_district_events(district_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str district_key: TBA District Key, eg `2016fim` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Event]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_district_events_with_http_info(district_key, **kwargs)  # noqa: E501

    def get_district_events_with_http_info(self, district_key, **kwargs):  # noqa: E501
        """get_district_events  # noqa: E501

        Gets a list of events in the given district.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_district_events_with_http_info(district_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str district_key: TBA District Key, eg `2016fim` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Event], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'district_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_district_events" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'district_key' is set
        if self.api_client.client_side_validation and ('district_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['district_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `district_key` when calling `get_district_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'district_key' in local_var_params:
            path_params['district_key'] = local_var_params['district_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/district/{district_key}/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Event]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_district_events_keys(self, district_key, **kwargs):  # noqa: E501
        """get_district_events_keys  # noqa: E501

        Gets a list of event keys for events in the given district.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_district_events_keys(district_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str district_key: TBA District Key, eg `2016fim` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_district_events_keys_with_http_info(district_key, **kwargs)  # noqa: E501

    def get_district_events_keys_with_http_info(self, district_key, **kwargs):  # noqa: E501
        """get_district_events_keys  # noqa: E501

        Gets a list of event keys for events in the given district.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_district_events_keys_with_http_info(district_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str district_key: TBA District Key, eg `2016fim` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[str], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'district_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_district_events_keys" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'district_key' is set
        if self.api_client.client_side_validation and ('district_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['district_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `district_key` when calling `get_district_events_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'district_key' in local_var_params:
            path_params['district_key'] = local_var_params['district_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/district/{district_key}/events/keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_district_events_simple(self, district_key, **kwargs):  # noqa: E501
        """get_district_events_simple  # noqa: E501

        Gets a short-form list of events in the given district.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_district_events_simple(district_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str district_key: TBA District Key, eg `2016fim` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[EventSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_district_events_simple_with_http_info(district_key, **kwargs)  # noqa: E501

    def get_district_events_simple_with_http_info(self, district_key, **kwargs):  # noqa: E501
        """get_district_events_simple  # noqa: E501

        Gets a short-form list of events in the given district.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_district_events_simple_with_http_info(district_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str district_key: TBA District Key, eg `2016fim` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[EventSimple], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'district_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_district_events_simple" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'district_key' is set
        if self.api_client.client_side_validation and ('district_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['district_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `district_key` when calling `get_district_events_simple`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'district_key' in local_var_params:
            path_params['district_key'] = local_var_params['district_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/district/{district_key}/events/simple', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EventSimple]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_event(self, event_key, **kwargs):  # noqa: E501
        """get_event  # noqa: E501

        Gets an Event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Event
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_event_with_http_info(event_key, **kwargs)  # noqa: E501

    def get_event_with_http_info(self, event_key, **kwargs):  # noqa: E501
        """get_event  # noqa: E501

        Gets an Event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_with_http_info(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(Event, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'event_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/event/{event_key}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Event',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_event_alliances(self, event_key, **kwargs):  # noqa: E501
        """get_event_alliances  # noqa: E501

        Gets a list of Elimination Alliances for the given Event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_alliances(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[EliminationAlliance]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_event_alliances_with_http_info(event_key, **kwargs)  # noqa: E501

    def get_event_alliances_with_http_info(self, event_key, **kwargs):  # noqa: E501
        """get_event_alliances  # noqa: E501

        Gets a list of Elimination Alliances for the given Event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_alliances_with_http_info(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[EliminationAlliance], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'event_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_alliances" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_event_alliances`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/event/{event_key}/alliances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EliminationAlliance]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_event_awards(self, event_key, **kwargs):  # noqa: E501
        """get_event_awards  # noqa: E501

        Gets a list of awards from the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_awards(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Award]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_event_awards_with_http_info(event_key, **kwargs)  # noqa: E501

    def get_event_awards_with_http_info(self, event_key, **kwargs):  # noqa: E501
        """get_event_awards  # noqa: E501

        Gets a list of awards from the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_awards_with_http_info(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Award], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'event_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_awards" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_event_awards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/event/{event_key}/awards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Award]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_event_district_points(self, event_key, **kwargs):  # noqa: E501
        """get_event_district_points  # noqa: E501

        Gets a list of team rankings for the Event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_district_points(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EventDistrictPoints
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_event_district_points_with_http_info(event_key, **kwargs)  # noqa: E501

    def get_event_district_points_with_http_info(self, event_key, **kwargs):  # noqa: E501
        """get_event_district_points  # noqa: E501

        Gets a list of team rankings for the Event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_district_points_with_http_info(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EventDistrictPoints, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'event_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_district_points" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_event_district_points`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/event/{event_key}/district_points', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EventDistrictPoints',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_event_insights(self, event_key, **kwargs):  # noqa: E501
        """get_event_insights  # noqa: E501

        Gets a set of Event-specific insights for the given Event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_insights(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EventInsights
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_event_insights_with_http_info(event_key, **kwargs)  # noqa: E501

    def get_event_insights_with_http_info(self, event_key, **kwargs):  # noqa: E501
        """get_event_insights  # noqa: E501

        Gets a set of Event-specific insights for the given Event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_insights_with_http_info(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EventInsights, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'event_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_insights" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_event_insights`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/event/{event_key}/insights', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EventInsights',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_event_match_timeseries(self, event_key, **kwargs):  # noqa: E501
        """get_event_match_timeseries  # noqa: E501

        Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_match_timeseries(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_event_match_timeseries_with_http_info(event_key, **kwargs)  # noqa: E501

    def get_event_match_timeseries_with_http_info(self, event_key, **kwargs):  # noqa: E501
        """get_event_match_timeseries  # noqa: E501

        Gets an array of Match Keys for the given event key that have timeseries data. Returns an empty array if no matches have timeseries data. *WARNING:* This is *not* official data, and is subject to a significant possibility of error, or missing data. Do not rely on this data for any purpose. In fact, pretend we made it up. *WARNING:* This endpoint and corresponding data models are under *active development* and may change at any time, including in breaking ways.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_match_timeseries_with_http_info(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[str], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'event_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_match_timeseries" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_event_match_timeseries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/event/{event_key}/matches/timeseries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_event_matches(self, event_key, **kwargs):  # noqa: E501
        """get_event_matches  # noqa: E501

        Gets a list of matches for the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_matches(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_event_matches_with_http_info(event_key, **kwargs)  # noqa: E501

    def get_event_matches_with_http_info(self, event_key, **kwargs):  # noqa: E501
        """get_event_matches  # noqa: E501

        Gets a list of matches for the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_matches_with_http_info(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Match], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'event_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_matches" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_event_matches`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/event/{event_key}/matches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Match]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_event_matches_keys(self, event_key, **kwargs):  # noqa: E501
        """get_event_matches_keys  # noqa: E501

        Gets a list of match keys for the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_matches_keys(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_event_matches_keys_with_http_info(event_key, **kwargs)  # noqa: E501

    def get_event_matches_keys_with_http_info(self, event_key, **kwargs):  # noqa: E501
        """get_event_matches_keys  # noqa: E501

        Gets a list of match keys for the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_matches_keys_with_http_info(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[str], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'event_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_matches_keys" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_event_matches_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/event/{event_key}/matches/keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_event_matches_simple(self, event_key, **kwargs):  # noqa: E501
        """get_event_matches_simple  # noqa: E501

        Gets a short-form list of matches for the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_matches_simple(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[MatchSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_event_matches_simple_with_http_info(event_key, **kwargs)  # noqa: E501

    def get_event_matches_simple_with_http_info(self, event_key, **kwargs):  # noqa: E501
        """get_event_matches_simple  # noqa: E501

        Gets a short-form list of matches for the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_matches_simple_with_http_info(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[MatchSimple], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'event_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_matches_simple" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_event_matches_simple`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/event/{event_key}/matches/simple', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MatchSimple]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_event_op_rs(self, event_key, **kwargs):  # noqa: E501
        """get_event_op_rs  # noqa: E501

        Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_op_rs(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EventOPRs
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_event_op_rs_with_http_info(event_key, **kwargs)  # noqa: E501

    def get_event_op_rs_with_http_info(self, event_key, **kwargs):  # noqa: E501
        """get_event_op_rs  # noqa: E501

        Gets a set of Event OPRs (including OPR, DPR, and CCWM) for the given Event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_op_rs_with_http_info(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EventOPRs, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'event_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_op_rs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_event_op_rs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/event/{event_key}/oprs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EventOPRs',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_event_predictions(self, event_key, **kwargs):  # noqa: E501
        """get_event_predictions  # noqa: E501

        Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_predictions(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_event_predictions_with_http_info(event_key, **kwargs)  # noqa: E501

    def get_event_predictions_with_http_info(self, event_key, **kwargs):  # noqa: E501
        """get_event_predictions  # noqa: E501

        Gets information on TBA-generated predictions for the given Event. Contains year-specific information. *WARNING* This endpoint is currently under development and may change at any time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_predictions_with_http_info(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(object, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'event_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_predictions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_event_predictions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/event/{event_key}/predictions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_event_rankings(self, event_key, **kwargs):  # noqa: E501
        """get_event_rankings  # noqa: E501

        Gets a list of team rankings for the Event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_rankings(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EventRanking
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_event_rankings_with_http_info(event_key, **kwargs)  # noqa: E501

    def get_event_rankings_with_http_info(self, event_key, **kwargs):  # noqa: E501
        """get_event_rankings  # noqa: E501

        Gets a list of team rankings for the Event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_rankings_with_http_info(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EventRanking, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'event_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_rankings" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_event_rankings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/event/{event_key}/rankings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EventRanking',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_event_simple(self, event_key, **kwargs):  # noqa: E501
        """get_event_simple  # noqa: E501

        Gets a short-form Event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_simple(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: EventSimple
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_event_simple_with_http_info(event_key, **kwargs)  # noqa: E501

    def get_event_simple_with_http_info(self, event_key, **kwargs):  # noqa: E501
        """get_event_simple  # noqa: E501

        Gets a short-form Event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_simple_with_http_info(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(EventSimple, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'event_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_simple" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_event_simple`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/event/{event_key}/simple', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EventSimple',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_event_teams(self, event_key, **kwargs):  # noqa: E501
        """get_event_teams  # noqa: E501

        Gets a list of `Team` objects that competed in the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_teams(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Team]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_event_teams_with_http_info(event_key, **kwargs)  # noqa: E501

    def get_event_teams_with_http_info(self, event_key, **kwargs):  # noqa: E501
        """get_event_teams  # noqa: E501

        Gets a list of `Team` objects that competed in the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_teams_with_http_info(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Team], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'event_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_teams" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_event_teams`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/event/{event_key}/teams', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Team]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_event_teams_keys(self, event_key, **kwargs):  # noqa: E501
        """get_event_teams_keys  # noqa: E501

        Gets a list of `Team` keys that competed in the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_teams_keys(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_event_teams_keys_with_http_info(event_key, **kwargs)  # noqa: E501

    def get_event_teams_keys_with_http_info(self, event_key, **kwargs):  # noqa: E501
        """get_event_teams_keys  # noqa: E501

        Gets a list of `Team` keys that competed in the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_teams_keys_with_http_info(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[str], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'event_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_teams_keys" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_event_teams_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/event/{event_key}/teams/keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_event_teams_simple(self, event_key, **kwargs):  # noqa: E501
        """get_event_teams_simple  # noqa: E501

        Gets a short-form list of `Team` objects that competed in the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_teams_simple(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[TeamSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_event_teams_simple_with_http_info(event_key, **kwargs)  # noqa: E501

    def get_event_teams_simple_with_http_info(self, event_key, **kwargs):  # noqa: E501
        """get_event_teams_simple  # noqa: E501

        Gets a short-form list of `Team` objects that competed in the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_teams_simple_with_http_info(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[TeamSimple], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'event_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_teams_simple" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_event_teams_simple`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/event/{event_key}/teams/simple', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TeamSimple]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_event_teams_statuses(self, event_key, **kwargs):  # noqa: E501
        """get_event_teams_statuses  # noqa: E501

        Gets a key-value list of the event statuses for teams competing at the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_teams_statuses(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: dict(str, TeamEventStatus)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_event_teams_statuses_with_http_info(event_key, **kwargs)  # noqa: E501

    def get_event_teams_statuses_with_http_info(self, event_key, **kwargs):  # noqa: E501
        """get_event_teams_statuses  # noqa: E501

        Gets a key-value list of the event statuses for teams competing at the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_event_teams_statuses_with_http_info(event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(dict(str, TeamEventStatus), status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'event_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_event_teams_statuses" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_event_teams_statuses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/event/{event_key}/teams/statuses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, TeamEventStatus)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_events_by_year(self, year, **kwargs):  # noqa: E501
        """get_events_by_year  # noqa: E501

        Gets a list of events in the given year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_events_by_year(year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Event]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_events_by_year_with_http_info(year, **kwargs)  # noqa: E501

    def get_events_by_year_with_http_info(self, year, **kwargs):  # noqa: E501
        """get_events_by_year  # noqa: E501

        Gets a list of events in the given year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_events_by_year_with_http_info(year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Event], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'year',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_events_by_year" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'year' is set
        if self.api_client.client_side_validation and ('year' not in local_var_params or  # noqa: E501
                                                        local_var_params['year'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `year` when calling `get_events_by_year`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'year' in local_var_params:
            path_params['year'] = local_var_params['year']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/events/{year}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Event]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_events_by_year_keys(self, year, **kwargs):  # noqa: E501
        """get_events_by_year_keys  # noqa: E501

        Gets a list of event keys in the given year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_events_by_year_keys(year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_events_by_year_keys_with_http_info(year, **kwargs)  # noqa: E501

    def get_events_by_year_keys_with_http_info(self, year, **kwargs):  # noqa: E501
        """get_events_by_year_keys  # noqa: E501

        Gets a list of event keys in the given year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_events_by_year_keys_with_http_info(year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[str], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'year',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_events_by_year_keys" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'year' is set
        if self.api_client.client_side_validation and ('year' not in local_var_params or  # noqa: E501
                                                        local_var_params['year'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `year` when calling `get_events_by_year_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'year' in local_var_params:
            path_params['year'] = local_var_params['year']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/events/{year}/keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_events_by_year_simple(self, year, **kwargs):  # noqa: E501
        """get_events_by_year_simple  # noqa: E501

        Gets a short-form list of events in the given year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_events_by_year_simple(year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[EventSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_events_by_year_simple_with_http_info(year, **kwargs)  # noqa: E501

    def get_events_by_year_simple_with_http_info(self, year, **kwargs):  # noqa: E501
        """get_events_by_year_simple  # noqa: E501

        Gets a short-form list of events in the given year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_events_by_year_simple_with_http_info(year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[EventSimple], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'year',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_events_by_year_simple" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'year' is set
        if self.api_client.client_side_validation and ('year' not in local_var_params or  # noqa: E501
                                                        local_var_params['year'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `year` when calling `get_events_by_year_simple`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'year' in local_var_params:
            path_params['year'] = local_var_params['year']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/events/{year}/simple', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EventSimple]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_event_awards(self, team_key, event_key, **kwargs):  # noqa: E501
        """get_team_event_awards  # noqa: E501

        Gets a list of awards the given team won at the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_event_awards(team_key, event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Award]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_event_awards_with_http_info(team_key, event_key, **kwargs)  # noqa: E501

    def get_team_event_awards_with_http_info(self, team_key, event_key, **kwargs):  # noqa: E501
        """get_team_event_awards  # noqa: E501

        Gets a list of awards the given team won at the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_event_awards_with_http_info(team_key, event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Award], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'team_key',
            'event_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_event_awards" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_event_awards`")  # noqa: E501
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_team_event_awards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/event/{event_key}/awards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Award]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_event_matches(self, team_key, event_key, **kwargs):  # noqa: E501
        """get_team_event_matches  # noqa: E501

        Gets a list of matches for the given team and event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_event_matches(team_key, event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_event_matches_with_http_info(team_key, event_key, **kwargs)  # noqa: E501

    def get_team_event_matches_with_http_info(self, team_key, event_key, **kwargs):  # noqa: E501
        """get_team_event_matches  # noqa: E501

        Gets a list of matches for the given team and event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_event_matches_with_http_info(team_key, event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Match], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'team_key',
            'event_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_event_matches" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_event_matches`")  # noqa: E501
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_team_event_matches`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/event/{event_key}/matches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Match]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_event_matches_keys(self, team_key, event_key, **kwargs):  # noqa: E501
        """get_team_event_matches_keys  # noqa: E501

        Gets a list of match keys for matches for the given team and event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_event_matches_keys(team_key, event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_event_matches_keys_with_http_info(team_key, event_key, **kwargs)  # noqa: E501

    def get_team_event_matches_keys_with_http_info(self, team_key, event_key, **kwargs):  # noqa: E501
        """get_team_event_matches_keys  # noqa: E501

        Gets a list of match keys for matches for the given team and event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_event_matches_keys_with_http_info(team_key, event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[str], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'team_key',
            'event_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_event_matches_keys" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_event_matches_keys`")  # noqa: E501
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_team_event_matches_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/event/{event_key}/matches/keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_event_matches_simple(self, team_key, event_key, **kwargs):  # noqa: E501
        """get_team_event_matches_simple  # noqa: E501

        Gets a short-form list of matches for the given team and event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_event_matches_simple(team_key, event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_event_matches_simple_with_http_info(team_key, event_key, **kwargs)  # noqa: E501

    def get_team_event_matches_simple_with_http_info(self, team_key, event_key, **kwargs):  # noqa: E501
        """get_team_event_matches_simple  # noqa: E501

        Gets a short-form list of matches for the given team and event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_event_matches_simple_with_http_info(team_key, event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Match], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'team_key',
            'event_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_event_matches_simple" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_event_matches_simple`")  # noqa: E501
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_team_event_matches_simple`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/event/{event_key}/matches/simple', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Match]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_event_status(self, team_key, event_key, **kwargs):  # noqa: E501
        """get_team_event_status  # noqa: E501

        Gets the competition rank and status of the team at the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_event_status(team_key, event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: TeamEventStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_event_status_with_http_info(team_key, event_key, **kwargs)  # noqa: E501

    def get_team_event_status_with_http_info(self, team_key, event_key, **kwargs):  # noqa: E501
        """get_team_event_status  # noqa: E501

        Gets the competition rank and status of the team at the given event.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_event_status_with_http_info(team_key, event_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str event_key: TBA Event Key, eg `2016nytr` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(TeamEventStatus, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'team_key',
            'event_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_event_status" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_event_status`")  # noqa: E501
        # verify the required parameter 'event_key' is set
        if self.api_client.client_side_validation and ('event_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['event_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `event_key` when calling `get_team_event_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501
        if 'event_key' in local_var_params:
            path_params['event_key'] = local_var_params['event_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/event/{event_key}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TeamEventStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_events(self, team_key, **kwargs):  # noqa: E501
        """get_team_events  # noqa: E501

        Gets a list of all events this team has competed at.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events(team_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Event]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_events_with_http_info(team_key, **kwargs)  # noqa: E501

    def get_team_events_with_http_info(self, team_key, **kwargs):  # noqa: E501
        """get_team_events  # noqa: E501

        Gets a list of all events this team has competed at.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events_with_http_info(team_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Event], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'team_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_events" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_events`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Event]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_events_by_year(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_events_by_year  # noqa: E501

        Gets a list of events this team has competed at in the given year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events_by_year(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Event]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_events_by_year_with_http_info(team_key, year, **kwargs)  # noqa: E501

    def get_team_events_by_year_with_http_info(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_events_by_year  # noqa: E501

        Gets a list of events this team has competed at in the given year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events_by_year_with_http_info(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Event], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'team_key',
            'year',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_events_by_year" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_events_by_year`")  # noqa: E501
        # verify the required parameter 'year' is set
        if self.api_client.client_side_validation and ('year' not in local_var_params or  # noqa: E501
                                                        local_var_params['year'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `year` when calling `get_team_events_by_year`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501
        if 'year' in local_var_params:
            path_params['year'] = local_var_params['year']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/events/{year}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Event]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_events_by_year_keys(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_events_by_year_keys  # noqa: E501

        Gets a list of the event keys for events this team has competed at in the given year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events_by_year_keys(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_events_by_year_keys_with_http_info(team_key, year, **kwargs)  # noqa: E501

    def get_team_events_by_year_keys_with_http_info(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_events_by_year_keys  # noqa: E501

        Gets a list of the event keys for events this team has competed at in the given year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events_by_year_keys_with_http_info(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[str], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'team_key',
            'year',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_events_by_year_keys" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_events_by_year_keys`")  # noqa: E501
        # verify the required parameter 'year' is set
        if self.api_client.client_side_validation and ('year' not in local_var_params or  # noqa: E501
                                                        local_var_params['year'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `year` when calling `get_team_events_by_year_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501
        if 'year' in local_var_params:
            path_params['year'] = local_var_params['year']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/events/{year}/keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_events_by_year_simple(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_events_by_year_simple  # noqa: E501

        Gets a short-form list of events this team has competed at in the given year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events_by_year_simple(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[EventSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_events_by_year_simple_with_http_info(team_key, year, **kwargs)  # noqa: E501

    def get_team_events_by_year_simple_with_http_info(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_events_by_year_simple  # noqa: E501

        Gets a short-form list of events this team has competed at in the given year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events_by_year_simple_with_http_info(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[EventSimple], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'team_key',
            'year',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_events_by_year_simple" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_events_by_year_simple`")  # noqa: E501
        # verify the required parameter 'year' is set
        if self.api_client.client_side_validation and ('year' not in local_var_params or  # noqa: E501
                                                        local_var_params['year'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `year` when calling `get_team_events_by_year_simple`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501
        if 'year' in local_var_params:
            path_params['year'] = local_var_params['year']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/events/{year}/simple', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EventSimple]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_events_keys(self, team_key, **kwargs):  # noqa: E501
        """get_team_events_keys  # noqa: E501

        Gets a list of the event keys for all events this team has competed at.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events_keys(team_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_events_keys_with_http_info(team_key, **kwargs)  # noqa: E501

    def get_team_events_keys_with_http_info(self, team_key, **kwargs):  # noqa: E501
        """get_team_events_keys  # noqa: E501

        Gets a list of the event keys for all events this team has competed at.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events_keys_with_http_info(team_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[str], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'team_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_events_keys" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_events_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/events/keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_events_simple(self, team_key, **kwargs):  # noqa: E501
        """get_team_events_simple  # noqa: E501

        Gets a short-form list of all events this team has competed at.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events_simple(team_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[EventSimple]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_events_simple_with_http_info(team_key, **kwargs)  # noqa: E501

    def get_team_events_simple_with_http_info(self, team_key, **kwargs):  # noqa: E501
        """get_team_events_simple  # noqa: E501

        Gets a short-form list of all events this team has competed at.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events_simple_with_http_info(team_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[EventSimple], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'team_key',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_events_simple" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_events_simple`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/events/simple', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EventSimple]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_team_events_statuses_by_year(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_events_statuses_by_year  # noqa: E501

        Gets a key-value list of the event statuses for events this team has competed at in the given year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events_statuses_by_year(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: dict(str, TeamEventStatus)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_team_events_statuses_by_year_with_http_info(team_key, year, **kwargs)  # noqa: E501

    def get_team_events_statuses_by_year_with_http_info(self, team_key, year, **kwargs):  # noqa: E501
        """get_team_events_statuses_by_year  # noqa: E501

        Gets a key-value list of the event statuses for events this team has competed at in the given year.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_team_events_statuses_by_year_with_http_info(team_key, year, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str team_key: TBA Team Key, eg `frc254` (required)
        :param int year: Competition Year (or Season). Must be 4 digits. (required)
        :param str if_modified_since: Value of the `Last-Modified` header in the most recently cached response by the client.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(dict(str, TeamEventStatus), status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'team_key',
            'year',
            'if_modified_since'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_team_events_statuses_by_year" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'team_key' is set
        if self.api_client.client_side_validation and ('team_key' not in local_var_params or  # noqa: E501
                                                        local_var_params['team_key'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `team_key` when calling `get_team_events_statuses_by_year`")  # noqa: E501
        # verify the required parameter 'year' is set
        if self.api_client.client_side_validation and ('year' not in local_var_params or  # noqa: E501
                                                        local_var_params['year'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `year` when calling `get_team_events_statuses_by_year`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_key' in local_var_params:
            path_params['team_key'] = local_var_params['team_key']  # noqa: E501
        if 'year' in local_var_params:
            path_params['year'] = local_var_params['year']  # noqa: E501

        query_params = []

        header_params = {}
        if 'if_modified_since' in local_var_params:
            header_params['If-Modified-Since'] = local_var_params['if_modified_since']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/team/{team_key}/events/{year}/statuses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, TeamEventStatus)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
